{
    "docs": [
        {
            "location": "/",
            "text": "What's OpenVeo Player ?\n\n\nOpenVeo Player is an \nAngularJS\n directive to wrap an HTML5, Youtube or Vimeo player aiming to offer images synchronization and chapters.\n\n\nCompatibility\n\n\nOpenVeo Player has been tested on the following browsers :\n\n\n\n\nGoogle Chrome 54\n\n\nMozilla Firefox 47\n\n\nOpera 42\n\n\nInternet Explorer Edge\n\n\n\n\n\n\n\n\n\n\n\n\nScreenshots",
            "title": "INTRODUCTION"
        },
        {
            "location": "/#whats-openveo-player",
            "text": "OpenVeo Player is an  AngularJS  directive to wrap an HTML5, Youtube or Vimeo player aiming to offer images synchronization and chapters.",
            "title": "What's OpenVeo Player ?"
        },
        {
            "location": "/#compatibility",
            "text": "OpenVeo Player has been tested on the following browsers :   Google Chrome 54  Mozilla Firefox 47  Opera 42  Internet Explorer Edge",
            "title": "Compatibility"
        },
        {
            "location": "/#screenshots",
            "text": "",
            "title": "Screenshots"
        },
        {
            "location": "/prerequisites/",
            "text": "OpenVeo Player requires and has been tested with :\n\n\n\n\nAngularJS\n (\n=1.4.1\n)\n\n\nAngularJS cookies\n (\n=1.4.1\n)\n\n\nhtml5shiv\n (For IE <= 9)\n\n\n\n\nTo play video with HTML5 player, OpenVeo requires :\n\n\n\n\nVideo.js\n (\n=5.9.2\n)",
            "title": "Prerequisites"
        },
        {
            "location": "/getting-started/",
            "text": "Introduction\n\n\nOpenVeo Player defines an AngularJS directive \nov-player\n :\n\n\n<ov-player\n  ov-data=\"data\"\n  ov-full-viewport=\"isFullViewport\"\n  ov-time=\"isTimeDisplayed\"\n  ov-fullscreen-icon=\"isFullscreenIconDisplayed\"\n  ov-volume-icon=\"isVolumeIconDisplayed\"\n  ov-mode-icon=\"isModeIconDisplayed\"\n  ov-settings-icon=\"isSettingsIconDisplayed\"\n  ov-media-sources-icon=\"isMediaSourcesIconDisplayed\"\n  ov-language=\"en\"\n  ov-player-type=\"html\"\n  ov-auto-play=\"true\"\n  ov-remember-position=\"true\"\n></ov-player>\n\n\n\n\nThis directive creates a video player with images synchronization and chapters.\n\n\n\n\nInclude player CSS\n\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n<!-- Only for HTML type-->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n\n\n\n\nSet player root\n\n\nOpenVeo player needs to be aware of its root path to load AngularJS partials.\n\n\n<script>\n  // Set ovPlayerDirectory to openveo-player root path\n  // This is used by openveo-player to get partials\n  // Do not forget the trailing slash !\n  var ovPlayerDirectory = \"lib/openveo-player/\";\n</script>\n\n\n\n\nNb :\n \novPlayerDirectory\n must be defined before including the OpenVeo Player script.\n\n\nInclude scripts\n\n\n<script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n<script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n\n<!-- Only for HTML type -->\n<script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n<script>\n  videojs.options.flash.swf = \"lib/video.js/dist/video-js.swf\";\n</script>\n\n<script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n\n\n\n\nNb :\n \nVideo.js\n library must be included before including the OpenVeo Player script.\n\n\nAttributes\n\n\nov-player\n directive attributes helps you customize the player.\n\n\nov-data\n\n\nSets player data, synchronize images, chapters and cut.\n\n\n$scope.data = {\n  mediaId : ['34532ezr54sdf87', 'dzzfeg4547841'], // The id(s) of the video(s)\n  timecodes : { // Timecodes\n    {\n      'timecode': 0, // Timecode in milliseconds (0 ms)\n      'image' : { // Image to display at 0 ms\n        'small' : 'slide_00000.jpeg', // Small version of the image\n        'large' : 'slide_00000_large.jpeg' // Large version of the image\n      }\n    },\n    {\n      'timecode': 1200, // Timecode in milliseconds (1200 ms)\n      'image' : { // Image to display at 1200 ms\n        'small' : 'slide_00001.jpeg', // Small version of the image\n        'large' : 'slide_00001_large.jpeg' // Large version of the image\n      }\n    }\n    ...\n  },\n  sources: [\n    {\n      files : [ // The list of different resolutions sources for this video (only for \"html\" player)\n      {\n        width : 640, // Video width for this file\n        height : 360, // Video height for this file\n        link : 'http://pathToSmallMP4.mp4' // Video url\n      },\n      {\n        width : 1280, // Video width for this file\n        height : 720, // Video height for this file\n        link : 'http://pathToHDMP4.mp4' // Video url\n      },\n      ...\n      ]\n    },{\n    ...\n    }\n  ],\n  thumbnail : '/1439286245225/thumbnail.jpg', // The media thumbnail (only for \"html\" player)\n  chapters : [ // Chapters\n    {\n      name : 'Chapter 1', // Chapter name\n      description : 'Chapter 1 description', // Chapter description\n      value : 0.04 // Chapter timecode in percent (percentage of the video)\n    },\n    {\n      name : 'Chapter 2', // Chapter name\n      description : 'Chapter 2 description', // Chapter description\n      value : 0.3 // Chapter timecode in percent (percentage of the video)\n    }\n    ...\n  ],\n  tags : [ // tags\n    {\n      name : 'Tag 1', // Tag name\n      description : 'Tag 1 description', // Tag description\n      value : 0.04 // Tag timecode in percent (percentage of the video)\n    },\n    {\n      name : 'Tag 2', // Tag name\n      description : 'Tag 2 description', // Tag description\n      value : 0.3 // Tag timecode in percent (percentage of the video)\n      file : {\n        mimetype: 'video/mp4'\n        basePath: '/path/to/ressource/video.mp4',\n        originalname: 'name_when_download'\n      }\n    },\n    ...\n  ],\n  cut : [ // Cut information (begin and end)\n    {\n      type : 'begin', // Cut type\n      value : 0 // Begin timecode (percentage of the media)\n    },\n    {\n      type : 'end', // Cut type\n      value : 0.9 // End timecode (percentage of the media)\n    }\n  ]\n}\n\n\n\n\n<ov-player\n  ...\n  ov-data=\"data\"\n></ov-player>\n\n\n\n\nov-full-viewport (optional)\n\n\nIndicates if player must take the full viewport or not. \nThis must be an assignable variable evaluated as a boolean.\n (Default to false)\n\n\n$scope.isFullViewport = false;\n\n\n\n\n<ov-player\n  ...\n  ov-full-viewport=\"isFullViewport\"\n></ov-player>\n\n\n\n\nov-time (optional)\n\n\nIndicates if video time / duration must be displayed or not. \nThis must be an assignable variable evaluated as a boolean.\n (Default to true)\n\n\n$scope.isTimeDisplayed = true;\n\n\n\n\n<ov-player\n  ...\n  ov-time=\"isTimeDisplayed\"\n></ov-player>\n\n\n\n\nov-fullscreen-icon (optional)\n\n\nIndicates if fullscreen icon must be displayed or not. \nThis must be an assignable variable evaluated as a boolean.\n (Default to true)\nNote that even is this option is set to true, this icon can be hidden on device/browser that not support Javascript Fullscreen API.\n\n\n$scope.isFullscreenIconDisplayed = true;\n\n\n\n\n<ov-player\n  ...\n  ov-fullscreen-icon=\"isFullscreenIconDisplayed\"\n></ov-player>\n\n\n\n\nov-volume-icon (optional)\n\n\nIndicates if volume icon must be displayed or not. \nThis must be an assignable variable evaluated as a boolean.\n (Default to true)\n\n\n$scope.isVolumeIconDisplayed = true;\n\n\n\n\n<ov-player\n  ...\n  ov-volume-icon=\"isVolumeIconDisplayed\"\n></ov-player>\n\n\n\n\nov-mode-icon (optional)\n\n\nIndicates if mode icon must be displayed or not. \nThis must be an assignable variable evaluated as a boolean.\n (Default to true)\n\n\n$scope.isModeIconDisplayed = true;\n\n\n\n\n<ov-player\n  ...\n  ov-mode-icon=\"isModeIconDisplayed\"\n></ov-player>\n\n\n\n\nov-media-sources-icon (optional)\n\n\nIndicates if multi-sources video icon must be displayed or not. (Default to false)\n\n\n$scope.isMediaSourcesIconDisplayed = false;\n\n\n\n\n<ov-player\n  ...\n  ov-media-sources-icon=\"isMediaSourcesIconDisplayed\"\n></ov-player>\n\n\n\n\nov-settings-icon (optional)\n\n\nIndicates if settings icon must be displayed or not. \nThis must be an assignable variable evaluated as a boolean.\n (Default to true)\n\n\n$scope.isSettingsIconDisplayed = true;\n\n\n\n\n<ov-player\n  ...\n  ov-settings-icon=\"isSettingsIconDisplayed\"\n></ov-player>\n\n\n\n\nov-language (optional)\n\n\nIndicates player language. (Default to \nen\n)\n\n\nSupported values are :\n\n\n\n\nfr\n\n\nen\n\n\n\n\n<ov-player\n  ...\n  ov-language=\"en\"\n></ov-player>\n\n\n\n\nov-player-type (optional)\n\n\nIndicates player type. (Default to \nhtml\n)\n\n\nSupported values are :\n\n\n\n\nvimeo\n\n\nyoutube\n\n\nhtml\n\n\n\n\n<ov-player\n  ...\n  ov-player-type=\"html\"\n></ov-player>\n\n\n\n\nov-auto-play (optional)\n\n\nIndicates if player must automatically start when media is ready. (Default to \nfalse\n)\n\n\n<ov-player\n  ...\n  ov-auto-play=\"true\"\n></ov-player>\n\n\n\n\nov-remember-position (optional)\n\n\nIndicates if player must automatically start at time which video has previously been stopped. (Default to \nfalse\n)\n\n\n<ov-player\n  ...\n  ov-remember-position=\"true\"\n></ov-player>",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#introduction",
            "text": "OpenVeo Player defines an AngularJS directive  ov-player  :  <ov-player\n  ov-data=\"data\"\n  ov-full-viewport=\"isFullViewport\"\n  ov-time=\"isTimeDisplayed\"\n  ov-fullscreen-icon=\"isFullscreenIconDisplayed\"\n  ov-volume-icon=\"isVolumeIconDisplayed\"\n  ov-mode-icon=\"isModeIconDisplayed\"\n  ov-settings-icon=\"isSettingsIconDisplayed\"\n  ov-media-sources-icon=\"isMediaSourcesIconDisplayed\"\n  ov-language=\"en\"\n  ov-player-type=\"html\"\n  ov-auto-play=\"true\"\n  ov-remember-position=\"true\"\n></ov-player>  This directive creates a video player with images synchronization and chapters.",
            "title": "Introduction"
        },
        {
            "location": "/getting-started/#include-player-css",
            "text": "<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n<!-- Only for HTML type-->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">",
            "title": "Include player CSS"
        },
        {
            "location": "/getting-started/#set-player-root",
            "text": "OpenVeo player needs to be aware of its root path to load AngularJS partials.  <script>\n  // Set ovPlayerDirectory to openveo-player root path\n  // This is used by openveo-player to get partials\n  // Do not forget the trailing slash !\n  var ovPlayerDirectory = \"lib/openveo-player/\";\n</script>  Nb :   ovPlayerDirectory  must be defined before including the OpenVeo Player script.",
            "title": "Set player root"
        },
        {
            "location": "/getting-started/#include-scripts",
            "text": "<script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n<script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n\n<!-- Only for HTML type -->\n<script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n<script>\n  videojs.options.flash.swf = \"lib/video.js/dist/video-js.swf\";\n</script>\n\n<script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>  Nb :   Video.js  library must be included before including the OpenVeo Player script.",
            "title": "Include scripts"
        },
        {
            "location": "/getting-started/#attributes",
            "text": "ov-player  directive attributes helps you customize the player.",
            "title": "Attributes"
        },
        {
            "location": "/getting-started/#ov-data",
            "text": "Sets player data, synchronize images, chapters and cut.  $scope.data = {\n  mediaId : ['34532ezr54sdf87', 'dzzfeg4547841'], // The id(s) of the video(s)\n  timecodes : { // Timecodes\n    {\n      'timecode': 0, // Timecode in milliseconds (0 ms)\n      'image' : { // Image to display at 0 ms\n        'small' : 'slide_00000.jpeg', // Small version of the image\n        'large' : 'slide_00000_large.jpeg' // Large version of the image\n      }\n    },\n    {\n      'timecode': 1200, // Timecode in milliseconds (1200 ms)\n      'image' : { // Image to display at 1200 ms\n        'small' : 'slide_00001.jpeg', // Small version of the image\n        'large' : 'slide_00001_large.jpeg' // Large version of the image\n      }\n    }\n    ...\n  },\n  sources: [\n    {\n      files : [ // The list of different resolutions sources for this video (only for \"html\" player)\n      {\n        width : 640, // Video width for this file\n        height : 360, // Video height for this file\n        link : 'http://pathToSmallMP4.mp4' // Video url\n      },\n      {\n        width : 1280, // Video width for this file\n        height : 720, // Video height for this file\n        link : 'http://pathToHDMP4.mp4' // Video url\n      },\n      ...\n      ]\n    },{\n    ...\n    }\n  ],\n  thumbnail : '/1439286245225/thumbnail.jpg', // The media thumbnail (only for \"html\" player)\n  chapters : [ // Chapters\n    {\n      name : 'Chapter 1', // Chapter name\n      description : 'Chapter 1 description', // Chapter description\n      value : 0.04 // Chapter timecode in percent (percentage of the video)\n    },\n    {\n      name : 'Chapter 2', // Chapter name\n      description : 'Chapter 2 description', // Chapter description\n      value : 0.3 // Chapter timecode in percent (percentage of the video)\n    }\n    ...\n  ],\n  tags : [ // tags\n    {\n      name : 'Tag 1', // Tag name\n      description : 'Tag 1 description', // Tag description\n      value : 0.04 // Tag timecode in percent (percentage of the video)\n    },\n    {\n      name : 'Tag 2', // Tag name\n      description : 'Tag 2 description', // Tag description\n      value : 0.3 // Tag timecode in percent (percentage of the video)\n      file : {\n        mimetype: 'video/mp4'\n        basePath: '/path/to/ressource/video.mp4',\n        originalname: 'name_when_download'\n      }\n    },\n    ...\n  ],\n  cut : [ // Cut information (begin and end)\n    {\n      type : 'begin', // Cut type\n      value : 0 // Begin timecode (percentage of the media)\n    },\n    {\n      type : 'end', // Cut type\n      value : 0.9 // End timecode (percentage of the media)\n    }\n  ]\n}  <ov-player\n  ...\n  ov-data=\"data\"\n></ov-player>",
            "title": "ov-data"
        },
        {
            "location": "/getting-started/#ov-full-viewport-optional",
            "text": "Indicates if player must take the full viewport or not.  This must be an assignable variable evaluated as a boolean.  (Default to false)  $scope.isFullViewport = false;  <ov-player\n  ...\n  ov-full-viewport=\"isFullViewport\"\n></ov-player>",
            "title": "ov-full-viewport (optional)"
        },
        {
            "location": "/getting-started/#ov-time-optional",
            "text": "Indicates if video time / duration must be displayed or not.  This must be an assignable variable evaluated as a boolean.  (Default to true)  $scope.isTimeDisplayed = true;  <ov-player\n  ...\n  ov-time=\"isTimeDisplayed\"\n></ov-player>",
            "title": "ov-time (optional)"
        },
        {
            "location": "/getting-started/#ov-fullscreen-icon-optional",
            "text": "Indicates if fullscreen icon must be displayed or not.  This must be an assignable variable evaluated as a boolean.  (Default to true)\nNote that even is this option is set to true, this icon can be hidden on device/browser that not support Javascript Fullscreen API.  $scope.isFullscreenIconDisplayed = true;  <ov-player\n  ...\n  ov-fullscreen-icon=\"isFullscreenIconDisplayed\"\n></ov-player>",
            "title": "ov-fullscreen-icon (optional)"
        },
        {
            "location": "/getting-started/#ov-volume-icon-optional",
            "text": "Indicates if volume icon must be displayed or not.  This must be an assignable variable evaluated as a boolean.  (Default to true)  $scope.isVolumeIconDisplayed = true;  <ov-player\n  ...\n  ov-volume-icon=\"isVolumeIconDisplayed\"\n></ov-player>",
            "title": "ov-volume-icon (optional)"
        },
        {
            "location": "/getting-started/#ov-mode-icon-optional",
            "text": "Indicates if mode icon must be displayed or not.  This must be an assignable variable evaluated as a boolean.  (Default to true)  $scope.isModeIconDisplayed = true;  <ov-player\n  ...\n  ov-mode-icon=\"isModeIconDisplayed\"\n></ov-player>",
            "title": "ov-mode-icon (optional)"
        },
        {
            "location": "/getting-started/#ov-media-sources-icon-optional",
            "text": "Indicates if multi-sources video icon must be displayed or not. (Default to false)  $scope.isMediaSourcesIconDisplayed = false;  <ov-player\n  ...\n  ov-media-sources-icon=\"isMediaSourcesIconDisplayed\"\n></ov-player>",
            "title": "ov-media-sources-icon (optional)"
        },
        {
            "location": "/getting-started/#ov-settings-icon-optional",
            "text": "Indicates if settings icon must be displayed or not.  This must be an assignable variable evaluated as a boolean.  (Default to true)  $scope.isSettingsIconDisplayed = true;  <ov-player\n  ...\n  ov-settings-icon=\"isSettingsIconDisplayed\"\n></ov-player>",
            "title": "ov-settings-icon (optional)"
        },
        {
            "location": "/getting-started/#ov-language-optional",
            "text": "Indicates player language. (Default to  en )  Supported values are :   fr  en   <ov-player\n  ...\n  ov-language=\"en\"\n></ov-player>",
            "title": "ov-language (optional)"
        },
        {
            "location": "/getting-started/#ov-player-type-optional",
            "text": "Indicates player type. (Default to  html )  Supported values are :   vimeo  youtube  html   <ov-player\n  ...\n  ov-player-type=\"html\"\n></ov-player>",
            "title": "ov-player-type (optional)"
        },
        {
            "location": "/getting-started/#ov-auto-play-optional",
            "text": "Indicates if player must automatically start when media is ready. (Default to  false )  <ov-player\n  ...\n  ov-auto-play=\"true\"\n></ov-player>",
            "title": "ov-auto-play (optional)"
        },
        {
            "location": "/getting-started/#ov-remember-position-optional",
            "text": "Indicates if player must automatically start at time which video has previously been stopped. (Default to  false )  <ov-player\n  ...\n  ov-remember-position=\"true\"\n></ov-player>",
            "title": "ov-remember-position (optional)"
        },
        {
            "location": "/adaptive-streaming/",
            "text": "Introduction\n\n\nOpenVeo Player support Adaptive Streaming DASH and HLS. It will automaticaly switch between protocols according browser capabilities. \nA Flash video player is used as a fallback player if none of sources protocol is supported by browser.\n\n\nPrerequisites\n\n\nAs OpenVeo Player embed video.js to display HTML player, in order to support DASH and HLS, you have to install and import dependencies:\n\n\nInstall Dash.js:\n\n\nbower install dashjs#2.1.1\n\n\n\nInstall videojs-contrib-dash plugin:\n\n\nbower install https://github.com/videojs/videojs-contrib-dash/releases/download/v2.4.0/videojs-dash.min.js\n\n\n\nInstall videojs-contrib-hls plugin:\n\n\nbower install https://github.com/videojs/videojs-contrib-hls/releases/download/v1.3.11/videojs.hls.min.js\n\n\n\nAnd import dependencies to use adaptive sources:\n\n\n    <script type=\"text/javascript\" src=\"lib/dashjs/dist/dash.all.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/videojs-contrib-dash/index.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/videojs-contrib-hls/index.js\"></script>\n\n\n\n\nHow to play adaptive sources\n\n\nYou need to define your adaptive sources by setting their mimetype and their link. \n\n\n$scope.data.sources = [\n  {\n    adaptive: [ // The list of video adaptive sources (only for \"html\" player)\n          { // RTMP source \n            \"mimeType\": 'rtmp/mp4',\n            \"link\": 'rtmp://192.168.1.204/openveo/&mp4:bunny.mp4'\n          },\n          { // Flash source for sources that do not support natively adaptive streaming\n           \"height\": 720,\n           \"mimeType\": 'application/f4m+xml',\n           \"link\": \"https://192.168.1.204/openveo/mp4:bunny.mp4/manifest.f4m\"\n          },\n          { // Dash source\n           \"height\": 720,\n           \"mimeType\": 'application/dash+xml', \n           \"link\": \"https://192.168.1.204/openveo/mp4:bunny.mp4/manifest.mpd\"\n          },\n          { //HLS Source\n           \"height\": 720,\n           \"mimeType\": 'application/vnd.apple.mpegurl',\n           \"link\": \"https://192.168.1.204/openveo/mp4:bunny.mp4/manifest.m3u8\"\n        }\n    ],\n    files : [ // The list of different resolutions sources for this video (only for \"html\" player)\n      {\n        width : 640, // Video width for this file\n        height : 360, // Video height for this file\n        link : 'http://pathToSmallMP4.mp4' // Video url\n      },\n      {\n        width : 1280, // Video width for this file\n        height : 720, // Video height for this file\n        link : 'http://pathToHDMP4.mp4' // Video url\n      },\n      ...\n    ]\n  }\n]\n\n\n\n\nAnd set you player type to 'html':\n\n\n<ov-player\n  ...\n  ov-data=\"data\"\n  ov-player-type=\"html\"\n></ov-player>\n\n\n\n\nNB\n : 'Adaptive' sources are always prioritized. 'files' sources will be ignored if 'adaptive' property is defined.",
            "title": "Adaptive streaming"
        },
        {
            "location": "/adaptive-streaming/#introduction",
            "text": "OpenVeo Player support Adaptive Streaming DASH and HLS. It will automaticaly switch between protocols according browser capabilities. \nA Flash video player is used as a fallback player if none of sources protocol is supported by browser.",
            "title": "Introduction"
        },
        {
            "location": "/adaptive-streaming/#prerequisites",
            "text": "As OpenVeo Player embed video.js to display HTML player, in order to support DASH and HLS, you have to install and import dependencies:  Install Dash.js:  bower install dashjs#2.1.1  Install videojs-contrib-dash plugin:  bower install https://github.com/videojs/videojs-contrib-dash/releases/download/v2.4.0/videojs-dash.min.js  Install videojs-contrib-hls plugin:  bower install https://github.com/videojs/videojs-contrib-hls/releases/download/v1.3.11/videojs.hls.min.js  And import dependencies to use adaptive sources:      <script type=\"text/javascript\" src=\"lib/dashjs/dist/dash.all.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/videojs-contrib-dash/index.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/videojs-contrib-hls/index.js\"></script>",
            "title": "Prerequisites"
        },
        {
            "location": "/adaptive-streaming/#how-to-play-adaptive-sources",
            "text": "You need to define your adaptive sources by setting their mimetype and their link.   $scope.data.sources = [\n  {\n    adaptive: [ // The list of video adaptive sources (only for \"html\" player)\n          { // RTMP source \n            \"mimeType\": 'rtmp/mp4',\n            \"link\": 'rtmp://192.168.1.204/openveo/&mp4:bunny.mp4'\n          },\n          { // Flash source for sources that do not support natively adaptive streaming\n           \"height\": 720,\n           \"mimeType\": 'application/f4m+xml',\n           \"link\": \"https://192.168.1.204/openveo/mp4:bunny.mp4/manifest.f4m\"\n          },\n          { // Dash source\n           \"height\": 720,\n           \"mimeType\": 'application/dash+xml', \n           \"link\": \"https://192.168.1.204/openveo/mp4:bunny.mp4/manifest.mpd\"\n          },\n          { //HLS Source\n           \"height\": 720,\n           \"mimeType\": 'application/vnd.apple.mpegurl',\n           \"link\": \"https://192.168.1.204/openveo/mp4:bunny.mp4/manifest.m3u8\"\n        }\n    ],\n    files : [ // The list of different resolutions sources for this video (only for \"html\" player)\n      {\n        width : 640, // Video width for this file\n        height : 360, // Video height for this file\n        link : 'http://pathToSmallMP4.mp4' // Video url\n      },\n      {\n        width : 1280, // Video width for this file\n        height : 720, // Video height for this file\n        link : 'http://pathToHDMP4.mp4' // Video url\n      },\n      ...\n    ]\n  }\n]  And set you player type to 'html':  <ov-player\n  ...\n  ov-data=\"data\"\n  ov-player-type=\"html\"\n></ov-player>  NB  : 'Adaptive' sources are always prioritized. 'files' sources will be ignored if 'adaptive' property is defined.",
            "title": "How to play adaptive sources"
        },
        {
            "location": "/animations/",
            "text": "You can turn on player animations by adding \nAngularJS animate\n.\n\n\n<script type=\"text/javascript\" src=\"/lib/angular-animate/angular-animate.min.js\"></script>",
            "title": "Animations"
        },
        {
            "location": "/api/",
            "text": "Introduction\n\n\nPlayer can be controlled by methods and emits catchable events on the player HTML element.\n\n\nMethods\n\n\nselectMode(mode)\n\n\nSets the display mode.\n\n\nUsage :\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.selectMode('presentation');\n});\n\n\n\n\nArguments :\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nString\n\n\nDisplay mode (can be either \nmedia\n, \nboth\n, \nboth-presentation\n or \npresentation\n)\n\n\n\n\n\n\n\n\nplayPause()\n\n\nStarts / Pauses the player.\n\n\nUsage :\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.playPause();\n});\n\n\n\n\nsetVolume(volume)\n\n\nSets the player volume.\n\n\nUsage :\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.setVolume(50);\n});\n\n\n\n\nArguments :\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nvolume\n\n\nNumber\n\n\nThe volume to set from 0 to 100\n\n\n\n\n\n\n\n\nsetTime(time)\n\n\nSets the player time.\n\n\nUsage :\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.setTime(50000);\n});\n\n\n\n\nArguments :\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ntime\n\n\nNumber\n\n\nThe time to set (in milliseconds)\n\n\n\n\n\n\n\n\nsetDefinition(definition)\n\n\nSets actual media definition.\n\n\nUsage :\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.setDefinition({\n    width: 1280,\n    height: 720,\n    link: 'http(s)://linkToTheHDFile'\n  });\n});\n\n\n\n\nArguments :\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ndefinition\n\n\nObject\n\n\nThe definition description object\n\n\n\n\n\n\n\n\nEvents\n\n\nready\n\n\nThe player is ready to receive actions.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n});\n\n\n\n\nwaiting\n\n\nMedia playback has stopped because the next frame is not available.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('waiting', function(event){\n  console.log('waiting');\n});\n\n\n\n\nplaying\n\n\nMedia playback is ready to start after being paused or delayed due to lack of media data.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('playing', function(event){\n  console.log('playing');\n});\n\n\n\n\ndurationChange\n\n\nThe duration attribute has just been updated.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('durationChange', function(event, duration){\n  console.log('durationChange with new duration = ' + duration + 'ms');\n});\n\n\n\n\nplay\n\n\nMedia is no longer paused.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('play', function(event, duration){\n  console.log('play');\n});\n\n\n\n\npause\n\n\nMedia has been paused.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('pause', function(event, duration){\n  console.log('pause');\n});\n\n\n\n\nloadProgress\n\n\nGot buffering information.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('loadProgress', function(event, percents){\n  console.log('loadProgress');\n  console.log('Buffering start = ' + percents.loadedStart);\n  console.log('Buffering end = ' + percents.loadedPercent);\n});\n\n\n\n\nplayProgress\n\n\nMedia playback position has changed.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('playProgress', function(event, data){\n  console.log('playProgress');\n  console.log('Current time = ' + data.time + 'ms');\n  console.log('Played percent = ' + data.percent);\n});\n\n\n\n\nend\n\n\nMedia playback has reached the end.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('end', function(event, duration){\n  console.log('end');\n});\n\n\n\n\nerror\n\n\nPlayer has encountered an error.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('error', function(event, error){\n  console.log(error.message);\n  console.log(error.code);\n});",
            "title": "API"
        },
        {
            "location": "/api/#introduction",
            "text": "Player can be controlled by methods and emits catchable events on the player HTML element.",
            "title": "Introduction"
        },
        {
            "location": "/api/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#selectmodemode",
            "text": "Sets the display mode.  Usage :  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.selectMode('presentation');\n});  Arguments :     Param  Type  Details      mode  String  Display mode (can be either  media ,  both ,  both-presentation  or  presentation )",
            "title": "selectMode(mode)"
        },
        {
            "location": "/api/#playpause",
            "text": "Starts / Pauses the player.  Usage :  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.playPause();\n});",
            "title": "playPause()"
        },
        {
            "location": "/api/#setvolumevolume",
            "text": "Sets the player volume.  Usage :  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.setVolume(50);\n});  Arguments :     Param  Type  Details      volume  Number  The volume to set from 0 to 100",
            "title": "setVolume(volume)"
        },
        {
            "location": "/api/#settimetime",
            "text": "Sets the player time.  Usage :  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.setTime(50000);\n});  Arguments :     Param  Type  Details      time  Number  The time to set (in milliseconds)",
            "title": "setTime(time)"
        },
        {
            "location": "/api/#setdefinitiondefinition",
            "text": "Sets actual media definition.  Usage :  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('ovPlayer');\n  playerController.setDefinition({\n    width: 1280,\n    height: 720,\n    link: 'http(s)://linkToTheHDFile'\n  });\n});  Arguments :     Param  Type  Details      definition  Object  The definition description object",
            "title": "setDefinition(definition)"
        },
        {
            "location": "/api/#events",
            "text": "",
            "title": "Events"
        },
        {
            "location": "/api/#ready",
            "text": "The player is ready to receive actions.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n});",
            "title": "ready"
        },
        {
            "location": "/api/#waiting",
            "text": "Media playback has stopped because the next frame is not available.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('waiting', function(event){\n  console.log('waiting');\n});",
            "title": "waiting"
        },
        {
            "location": "/api/#playing",
            "text": "Media playback is ready to start after being paused or delayed due to lack of media data.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('playing', function(event){\n  console.log('playing');\n});",
            "title": "playing"
        },
        {
            "location": "/api/#durationchange",
            "text": "The duration attribute has just been updated.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('durationChange', function(event, duration){\n  console.log('durationChange with new duration = ' + duration + 'ms');\n});",
            "title": "durationChange"
        },
        {
            "location": "/api/#play",
            "text": "Media is no longer paused.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('play', function(event, duration){\n  console.log('play');\n});",
            "title": "play"
        },
        {
            "location": "/api/#pause",
            "text": "Media has been paused.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('pause', function(event, duration){\n  console.log('pause');\n});",
            "title": "pause"
        },
        {
            "location": "/api/#loadprogress",
            "text": "Got buffering information.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('loadProgress', function(event, percents){\n  console.log('loadProgress');\n  console.log('Buffering start = ' + percents.loadedStart);\n  console.log('Buffering end = ' + percents.loadedPercent);\n});",
            "title": "loadProgress"
        },
        {
            "location": "/api/#playprogress",
            "text": "Media playback position has changed.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('playProgress', function(event, data){\n  console.log('playProgress');\n  console.log('Current time = ' + data.time + 'ms');\n  console.log('Played percent = ' + data.percent);\n});",
            "title": "playProgress"
        },
        {
            "location": "/api/#end",
            "text": "Media playback has reached the end.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('end', function(event, duration){\n  console.log('end');\n});",
            "title": "end"
        },
        {
            "location": "/api/#error",
            "text": "Player has encountered an error.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('error', function(event, error){\n  console.log(error.message);\n  console.log(error.code);\n});",
            "title": "error"
        },
        {
            "location": "/examples/",
            "text": "Player HTML example\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = 'lib/openveo-player/';\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"html\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n\n    <script>\n\n      // Set flash fallback for video.js\n      videojs.options.flash.swf = \"lib/video.js/dist/video-js.swf\";\n\n    </script>\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : '136081112', // The id of the video\n        timecodes : { // Timecodes\n          {\n            timecode : 0, // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpeg', // Small version of the image\n              large : 'slide_00000_large.jpeg'// Large version of the image\n            }\n          },\n          {\n            timecode : 1200, // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n          }\n        },\n        sources : [\n          {\n            files : [ // The list of video files (only for \"html\" player)\n              {\n                width : 640, // Video width for this file\n                height : 360, // Video height for this file\n                link : 'http://pathToSDMP4.mp4' // Video url\n              },\n              {\n                width : 1280, // Video width for this file\n                height : 720, // Video height for this file\n                link : 'http://pathToHDMP4.mp4' // Video url\n              }\n            ]\n          }\n        ],\n        thumbnail : \"/1439286245225/thumbnail.jpg\", // The media thumbnail (only for \"html\" player)\n        chapters : [ // Chapters\n          {\n            name : 'Chapter 1', // Chapter name\n            description : 'Chapter 1 description', // Chapter description\n            value : 0.04 // Chapter timecode in percent (percentage of the video)\n          },\n          {\n            name : 'Chapter 2', // Chapter name\n            description : 'Chapter 2 description', // Chapter description\n            value : 0.3 // Chapter timecode in percent (percentage of the video)\n          }\n        ],\n        tags : [ // Tags\n          {\n            name : 'Tag 1', // Tag name\n            description : 'Tag 1 description', // Tag description\n            value : 0.04 // Tag timecode in percent (percentage of the video)\n          },\n          {\n            name : 'Tag 2', // Tag name\n            description : 'Tag 2 description', // Tag description\n            value : 0.3 // Tag timecode in percent (percentage of the video)\n          }\n        ],\n        cut : [ // Cut information (begin and end)\n          {\n            type : 'begin', // Cut type\n            value : 0 // Begin timecode (percentage of the media)\n          },\n          {\n            type : 'end', // Cut type\n            value : 0.9 // End timecode (percentage of the media)\n          }\n        ]\n      };\n  }\n\n})(angular);\n\n\n\n\nPlayer HTML Multi-sources example\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = 'lib/openveo-player/';\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"html\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n\n    <script>\n\n      // Set flash fallback for video.js\n      videojs.options.flash.swf = \"lib/video.js/dist/video-js.swf\";\n\n    </script>\n\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : ['136081112', '136081113'], // The id of the video\n        timecodes : { // Timecodes\n          {\n            timecode : 0, // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpeg', // Small version of the image\n              large : 'slide_00000_large.jpeg' // Large version of the image\n            }\n          },\n          {\n            timecode : 1200, // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n         }\n        },\n        sources : [\n          {\n            files : [ // The list of video files for 136081112 media ID\n              {\n                width : 640, // Video width for this file\n                height : 360, // Video height for this file\n                link : 'http://136081112/pathToSDMP4.mp4' // Video url\n              },\n              {\n                width : 1280, // Video width for this file\n                height : 720, // Video height for this file\n                link : 'http://136081112/pathToHDMP4.mp4' // Video url\n              }\n            ]\n          },\n          {\n            files : [ // The list of video files for 136081113 media ID\n              {\n                width : 640, // Video width for this file\n                height : 360, // Video height for this file\n                link : 'http://136081113/pathToSDMP4.mp4' // Video url\n              },\n              {\n                width : 1280, // Video width for this file\n                height : 720, // Video height for this file\n                link : 'http://136081113/pathToHDMP4.mp4' // Video url\n              }\n            ]\n          }\n        ],\n        thumbnail : \"/1439286245225/thumbnail.jpg\", // The media thumbnail (only for \"html\" player)\n\n        cut : [ // Cut information (begin and end)\n          {\n            type : 'begin', // Cut type\n            value : 0 // Begin timecode (percentage of the media)\n          },\n          {\n            type : 'end', // Cut type\n            value : 0.9 // End timecode (percentage of the media)\n          }\n        ]\n      };\n  }\n\n})(angular);\n\n\n\n\nPlayer Vimeo example\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = \"lib/openveo-player/\";\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"vimeo\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : ['136081112'], // The id of the video on vimeo platform\n        timecodes : { // Timecodes\n          {\n            timecode : 0, // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpe', // Small version of the image\n              large : 'slide_00000_large.jpeg'// Large version of the image\n            }\n          },\n          {\n            timecode : 1200, // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n         }\n        },\n        tags : [ // tags\n          {\n            name : 'Tag 1', // Tag name\n            description : 'Tag 1 description', // Tag description\n            value : 0.04 // Tag timecode in percent (percentage of the video)\n          },\n          {\n            name : 'Tag 2', // Tag name\n            description : 'Tag 2 description', // Tag description\n            value : 0.3 // Tag timecode in percent (percentage of the video)\n          }\n        ],\n        cut : [ // Cut information (begin and end)\n         {\n           type : 'begin', // Cut type\n           value : 0 // Begin timecode (percentage of the media)\n         },\n         {\n           type : 'end', // Cut type\n           value : 0.9 // End timecode (percentage of the media)\n         }\n       ]\n     };\n  }\n\n})(angular);\n\n\n\n\nPlayer Youtube example\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = \"lib/openveo-player/\";\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"youtube\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : ['136081112'], // The id(s) of the video(s) on youtube platform\n        timecodes : { // Timecodes\n          0 : { // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpeg', // Small version of the image\n              large : 'slide_00000_large.jpeg' // Large version of the image\n            }\n          },\n          1200 : { // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n         }\n       },\n       chapters : [ // Chapters\n         {\n           name : 'Chapter 1', // Chapter name\n           description : 'Chapter 1 description', // Chapter description\n           value : 0.04 // Chapter timecode in percent (percentage of the video)\n         },\n         {\n           name : 'Chapter 2', // Chapter name\n           description : 'Chapter 2 description', // Chapter description\n           value : 0.3 // Chapter timecode in percent (percentage of the video)\n         }\n       ],\n       cut : [ // Cut information (begin and end)\n         {\n           type : 'begin', // Cut type\n           value : 0 // Begin timecode (percentage of the media)\n         },\n         {\n           type : 'end', // Cut type\n           value : 0.9 // End timecode (percentage of the media)\n         }\n       ]\n     };\n  }\n\n})(angular);\n\n\n\n\nPlayer API\n example\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = \"lib/openveo-player/\";\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"html\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n      id=\"myPlayer\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n\n    <script>\n\n      // Set flash fallback for video.js\n      videojs.options.flash.swf = \"lib/video.js/dist/video-js.swf\";\n\n    </script>\n\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : ['136081112'], // The id(s) of the video(s) on vimeo platform\n        timecodes : { // Timecodes\n          0 : { // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpeg', // Small version of the image\n              large : 'slide_00000_large.jpeg' // Large version of the image\n            }\n          },\n          1200 : { // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n         }\n       },\n       sources: [\n         {\n           files : [ // The list of video files (only for \"html\" player)\n           {\n             width : 640, // Video width for this file\n             height : 360, // Video height for this file\n             link : 'http://pathToSDMP4.mp4' // Video url\n           },\n           {\n             width : 1280, // Video width for this file\n             height : 720, // Video height for this file\n             link : 'http://pathToHDMP4.mp4' // Video url\n           }\n           ]\n         }\n       ]\n     };\n\n     var myPlayer = document.getElementById('myPlayer');\n\n     // Listen to ready event\n     angular.element(myPlayer).on('ready', function(event){\n       console.log('ready');\n\n       var playerController = angular.element(myPlayer).controller('ovPlayer');\n\n       // Selects a new display mode ('media')\n       playerController.selectMode('media');\n\n       // Starts / Pauses the player\n       playerController.playPause();\n\n       // Sets volume to 10%\n       playerController.setVolume(10);\n\n       // Seeks media to time 20s\n       playerController.setTime(20000);\n\n     });\n\n     angular.element(myPlayer).on('waiting', function(event){\n       console.log('waiting');\n     });\n\n     angular.element(myPlayer).on('playing', function(event){\n       console.log('playing');\n     });\n\n     angular.element(myPlayer).on('durationChange', function(event, duration){\n       console.log('durationChange with new duration = ' + duration + 'ms');\n     });\n\n     angular.element(myPlayer).on('play', function(event){\n       console.log('play');\n     });\n\n     angular.element(myPlayer).on('pause', function(event){\n       console.log('pause');\n     });\n\n     angular.element(myPlayer).on('loadProgress', function(event, percents){\n       console.log('loadProgress');\n       console.log('Buffering start = ' + percents.loadedStart);\n       console.log('Buffering end = ' + percents.loadedPercent);\n     });\n\n     angular.element(myPlayer).on('playProgress', function(event, data){\n       console.log('playProgress');\n       console.log('Current time = ' + data.time + 'ms');\n       console.log('Played percent = ' + data.percent);\n     });\n\n     angular.element(myPlayer).on('end', function(event){\n       console.log('end');\n     });\n\n     angular.element(myPlayer).on('error', function(event, error){\n       console.log(error.message);\n       console.log(error.code);\n     });\n\n  }\n\n})(angular);",
            "title": "Examples"
        },
        {
            "location": "/examples/#player-html-example",
            "text": "",
            "title": "Player HTML example"
        },
        {
            "location": "/examples/#indexhtml",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = 'lib/openveo-player/';\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"html\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n\n    <script>\n\n      // Set flash fallback for video.js\n      videojs.options.flash.swf = \"lib/video.js/dist/video-js.swf\";\n\n    </script>\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs",
            "text": "(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : '136081112', // The id of the video\n        timecodes : { // Timecodes\n          {\n            timecode : 0, // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpeg', // Small version of the image\n              large : 'slide_00000_large.jpeg'// Large version of the image\n            }\n          },\n          {\n            timecode : 1200, // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n          }\n        },\n        sources : [\n          {\n            files : [ // The list of video files (only for \"html\" player)\n              {\n                width : 640, // Video width for this file\n                height : 360, // Video height for this file\n                link : 'http://pathToSDMP4.mp4' // Video url\n              },\n              {\n                width : 1280, // Video width for this file\n                height : 720, // Video height for this file\n                link : 'http://pathToHDMP4.mp4' // Video url\n              }\n            ]\n          }\n        ],\n        thumbnail : \"/1439286245225/thumbnail.jpg\", // The media thumbnail (only for \"html\" player)\n        chapters : [ // Chapters\n          {\n            name : 'Chapter 1', // Chapter name\n            description : 'Chapter 1 description', // Chapter description\n            value : 0.04 // Chapter timecode in percent (percentage of the video)\n          },\n          {\n            name : 'Chapter 2', // Chapter name\n            description : 'Chapter 2 description', // Chapter description\n            value : 0.3 // Chapter timecode in percent (percentage of the video)\n          }\n        ],\n        tags : [ // Tags\n          {\n            name : 'Tag 1', // Tag name\n            description : 'Tag 1 description', // Tag description\n            value : 0.04 // Tag timecode in percent (percentage of the video)\n          },\n          {\n            name : 'Tag 2', // Tag name\n            description : 'Tag 2 description', // Tag description\n            value : 0.3 // Tag timecode in percent (percentage of the video)\n          }\n        ],\n        cut : [ // Cut information (begin and end)\n          {\n            type : 'begin', // Cut type\n            value : 0 // Begin timecode (percentage of the media)\n          },\n          {\n            type : 'end', // Cut type\n            value : 0.9 // End timecode (percentage of the media)\n          }\n        ]\n      };\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/examples/#player-html-multi-sources-example",
            "text": "",
            "title": "Player HTML Multi-sources example"
        },
        {
            "location": "/examples/#indexhtml_1",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = 'lib/openveo-player/';\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"html\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n\n    <script>\n\n      // Set flash fallback for video.js\n      videojs.options.flash.swf = \"lib/video.js/dist/video-js.swf\";\n\n    </script>\n\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs_1",
            "text": "(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : ['136081112', '136081113'], // The id of the video\n        timecodes : { // Timecodes\n          {\n            timecode : 0, // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpeg', // Small version of the image\n              large : 'slide_00000_large.jpeg' // Large version of the image\n            }\n          },\n          {\n            timecode : 1200, // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n         }\n        },\n        sources : [\n          {\n            files : [ // The list of video files for 136081112 media ID\n              {\n                width : 640, // Video width for this file\n                height : 360, // Video height for this file\n                link : 'http://136081112/pathToSDMP4.mp4' // Video url\n              },\n              {\n                width : 1280, // Video width for this file\n                height : 720, // Video height for this file\n                link : 'http://136081112/pathToHDMP4.mp4' // Video url\n              }\n            ]\n          },\n          {\n            files : [ // The list of video files for 136081113 media ID\n              {\n                width : 640, // Video width for this file\n                height : 360, // Video height for this file\n                link : 'http://136081113/pathToSDMP4.mp4' // Video url\n              },\n              {\n                width : 1280, // Video width for this file\n                height : 720, // Video height for this file\n                link : 'http://136081113/pathToHDMP4.mp4' // Video url\n              }\n            ]\n          }\n        ],\n        thumbnail : \"/1439286245225/thumbnail.jpg\", // The media thumbnail (only for \"html\" player)\n\n        cut : [ // Cut information (begin and end)\n          {\n            type : 'begin', // Cut type\n            value : 0 // Begin timecode (percentage of the media)\n          },\n          {\n            type : 'end', // Cut type\n            value : 0.9 // End timecode (percentage of the media)\n          }\n        ]\n      };\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/examples/#player-vimeo-example",
            "text": "",
            "title": "Player Vimeo example"
        },
        {
            "location": "/examples/#indexhtml_2",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = \"lib/openveo-player/\";\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"vimeo\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs_2",
            "text": "(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : ['136081112'], // The id of the video on vimeo platform\n        timecodes : { // Timecodes\n          {\n            timecode : 0, // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpe', // Small version of the image\n              large : 'slide_00000_large.jpeg'// Large version of the image\n            }\n          },\n          {\n            timecode : 1200, // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n         }\n        },\n        tags : [ // tags\n          {\n            name : 'Tag 1', // Tag name\n            description : 'Tag 1 description', // Tag description\n            value : 0.04 // Tag timecode in percent (percentage of the video)\n          },\n          {\n            name : 'Tag 2', // Tag name\n            description : 'Tag 2 description', // Tag description\n            value : 0.3 // Tag timecode in percent (percentage of the video)\n          }\n        ],\n        cut : [ // Cut information (begin and end)\n         {\n           type : 'begin', // Cut type\n           value : 0 // Begin timecode (percentage of the media)\n         },\n         {\n           type : 'end', // Cut type\n           value : 0.9 // End timecode (percentage of the media)\n         }\n       ]\n     };\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/examples/#player-youtube-example",
            "text": "",
            "title": "Player Youtube example"
        },
        {
            "location": "/examples/#indexhtml_3",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = \"lib/openveo-player/\";\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"youtube\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs_3",
            "text": "(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : ['136081112'], // The id(s) of the video(s) on youtube platform\n        timecodes : { // Timecodes\n          0 : { // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpeg', // Small version of the image\n              large : 'slide_00000_large.jpeg' // Large version of the image\n            }\n          },\n          1200 : { // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n         }\n       },\n       chapters : [ // Chapters\n         {\n           name : 'Chapter 1', // Chapter name\n           description : 'Chapter 1 description', // Chapter description\n           value : 0.04 // Chapter timecode in percent (percentage of the video)\n         },\n         {\n           name : 'Chapter 2', // Chapter name\n           description : 'Chapter 2 description', // Chapter description\n           value : 0.3 // Chapter timecode in percent (percentage of the video)\n         }\n       ],\n       cut : [ // Cut information (begin and end)\n         {\n           type : 'begin', // Cut type\n           value : 0 // Begin timecode (percentage of the media)\n         },\n         {\n           type : 'end', // Cut type\n           value : 0.9 // End timecode (percentage of the media)\n         }\n       ]\n     };\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/examples/#player-api-example",
            "text": "",
            "title": "Player API example"
        },
        {
            "location": "/examples/#indexhtml_4",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n    <script>\n\n      // Set ovPlayerDirectory to openveo-player root path\n      // This is used by openveo-player to get partials\n      // Do not forget the trailing slash !\n      var ovPlayerDirectory = \"lib/openveo-player/\";\n    </script>\n\n  </head>\n\n  <body>\n\n    <ov-player\n      ov-player-type=\"html\"\n      ov-data=\"data\"\n      ng-show=\"ready\"\n      id=\"myPlayer\"\n    ></ov-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n\n    <script>\n\n      // Set flash fallback for video.js\n      videojs.options.flash.swf = \"lib/video.js/dist/video-js.swf\";\n\n    </script>\n\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs_4",
            "text": "(function(angular){\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope', '$window', '$location'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope, $window, $location){\n    $scope.ready = true;\n    $scope.data =\n      {\n        mediaId : ['136081112'], // The id(s) of the video(s) on vimeo platform\n        timecodes : { // Timecodes\n          0 : { // Timecode in milliseconds (0 ms)\n            image : { // Image to display at 0 ms\n              small : 'slide_00000.jpeg', // Small version of the image\n              large : 'slide_00000_large.jpeg' // Large version of the image\n            }\n          },\n          1200 : { // Timecode in milliseconds (1200 ms)\n            image : { // Image to display at 1200 ms\n              small : 'slide_00001.jpeg', // Small version of the image\n              large : 'slide_00001_large.jpeg' // Large version of the image\n            }\n         }\n       },\n       sources: [\n         {\n           files : [ // The list of video files (only for \"html\" player)\n           {\n             width : 640, // Video width for this file\n             height : 360, // Video height for this file\n             link : 'http://pathToSDMP4.mp4' // Video url\n           },\n           {\n             width : 1280, // Video width for this file\n             height : 720, // Video height for this file\n             link : 'http://pathToHDMP4.mp4' // Video url\n           }\n           ]\n         }\n       ]\n     };\n\n     var myPlayer = document.getElementById('myPlayer');\n\n     // Listen to ready event\n     angular.element(myPlayer).on('ready', function(event){\n       console.log('ready');\n\n       var playerController = angular.element(myPlayer).controller('ovPlayer');\n\n       // Selects a new display mode ('media')\n       playerController.selectMode('media');\n\n       // Starts / Pauses the player\n       playerController.playPause();\n\n       // Sets volume to 10%\n       playerController.setVolume(10);\n\n       // Seeks media to time 20s\n       playerController.setTime(20000);\n\n     });\n\n     angular.element(myPlayer).on('waiting', function(event){\n       console.log('waiting');\n     });\n\n     angular.element(myPlayer).on('playing', function(event){\n       console.log('playing');\n     });\n\n     angular.element(myPlayer).on('durationChange', function(event, duration){\n       console.log('durationChange with new duration = ' + duration + 'ms');\n     });\n\n     angular.element(myPlayer).on('play', function(event){\n       console.log('play');\n     });\n\n     angular.element(myPlayer).on('pause', function(event){\n       console.log('pause');\n     });\n\n     angular.element(myPlayer).on('loadProgress', function(event, percents){\n       console.log('loadProgress');\n       console.log('Buffering start = ' + percents.loadedStart);\n       console.log('Buffering end = ' + percents.loadedPercent);\n     });\n\n     angular.element(myPlayer).on('playProgress', function(event, data){\n       console.log('playProgress');\n       console.log('Current time = ' + data.time + 'ms');\n       console.log('Played percent = ' + data.percent);\n     });\n\n     angular.element(myPlayer).on('end', function(event){\n       console.log('end');\n     });\n\n     angular.element(myPlayer).on('error', function(event, error){\n       console.log(error.message);\n       console.log(error.code);\n     });\n\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/developers/basics/",
            "text": "Directives\n\n\nOpenVeo Player defines several directives :\n\n\n\n\nov-player\n : The main directive containing the whole player\n\n\nov-player-tabs\n : A directive to create tabs (holds one or several ov-view directives)\n\n\nov-player-view\n : A directive to create a view controlled by a tab (using ov-tabs)\n\n\nov-player-index\n : A directive to display and control the index view\n\n\nov-player-chapters\n : A directive to display and control the chapters view\n\n\nov-player-tags\n : A directive to display and control the tags view\n\n\n\n\nPlayers\n\n\nEach player (HTML, Youtube, Vimeo) as its own implementation and associated template.",
            "title": "The basics"
        },
        {
            "location": "/developers/basics/#directives",
            "text": "OpenVeo Player defines several directives :   ov-player  : The main directive containing the whole player  ov-player-tabs  : A directive to create tabs (holds one or several ov-view directives)  ov-player-view  : A directive to create a view controlled by a tab (using ov-tabs)  ov-player-index  : A directive to display and control the index view  ov-player-chapters  : A directive to display and control the chapters view  ov-player-tags  : A directive to display and control the tags view",
            "title": "Directives"
        },
        {
            "location": "/developers/basics/#players",
            "text": "Each player (HTML, Youtube, Vimeo) as its own implementation and associated template.",
            "title": "Players"
        },
        {
            "location": "/developers/prerequisites/",
            "text": "OpenVeo Player requires additional elements for development :\n\n\n\n\nGit\n - openveo-player is versioned with git\n\n\nRuby\n / \nSass\n / \nCompass\n - CSS is written using SASS / Compass\n\n\nKarma\n - Unit tested are performed using karma\n\n\nGrunt\n - Grunt is used to launch unit tests and compile sources",
            "title": "Prerequisites"
        },
        {
            "location": "/developers/installation/",
            "text": "Clone project from git\n\n\ngit clone git@github.com:veo-labs/openveo-player.git\n\n\n\nInstall project's dependencies\n\n\ncd openveo-player\nnpm install",
            "title": "Installation"
        },
        {
            "location": "/developers/installation/#clone-project-from-git",
            "text": "git clone git@github.com:veo-labs/openveo-player.git",
            "title": "Clone project from git"
        },
        {
            "location": "/developers/installation/#install-projects-dependencies",
            "text": "cd openveo-player\nnpm install",
            "title": "Install project's dependencies"
        },
        {
            "location": "/developers/compilation/",
            "text": "Introduction\n\n\nOpenVeo player is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.\n\n\nCompiling SASS files\n\n\nYou can compile SASS files using the following command :\n\n\ngrunt compass:dist\n\n\n\nOr you can watch SASS files changes using the following command :\n\n\ngrunt\n\n\n\nCompiling JavaScript files\n\n\nYou'll probably want to compile AngularJS files in production, for better performance. You can do it using :\n\n\ngrunt dist",
            "title": "CSS / SASS / JS compilation"
        },
        {
            "location": "/developers/compilation/#introduction",
            "text": "OpenVeo player is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.",
            "title": "Introduction"
        },
        {
            "location": "/developers/compilation/#compiling-sass-files",
            "text": "You can compile SASS files using the following command :  grunt compass:dist  Or you can watch SASS files changes using the following command :  grunt",
            "title": "Compiling SASS files"
        },
        {
            "location": "/developers/compilation/#compiling-javascript-files",
            "text": "You'll probably want to compile AngularJS files in production, for better performance. You can do it using :  grunt dist",
            "title": "Compiling JavaScript files"
        },
        {
            "location": "/developers/i18n/",
            "text": "OpenVeo Player translations are defined in ov.player module constant \novPlayerI18nTranslations\n.",
            "title": "I18N and I10N"
        },
        {
            "location": "/developers/coding-standards/",
            "text": "OpenVeo Player uses Node.js coding standards. \nESLint\n is used to validate coding rules. You can launch a code verification using the following command :\n\n\ngrunt eslint",
            "title": "Coding standards"
        },
        {
            "location": "/developers/unit-tests/",
            "text": "Unit tests are performed using \nKarma\n. You can launch unit tests with the following command :\n\n\ngrunt karma",
            "title": "Unit tests"
        }
    ]
}