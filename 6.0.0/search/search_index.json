{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What's OpenVeo Player? OpenVeo Player is an AngularJS component to wrap an HTML5, Youtube or Vimeo player aiming to offer images synchronization and points of interest (chapters, tags). Compatibility OpenVeo Player has been tested on the following browsers: Google Chrome 58 Mozilla Firefox 52 Opera 45 Edge Screenshots","title":"INTRODUCTION"},{"location":"#whats-openveo-player","text":"OpenVeo Player is an AngularJS component to wrap an HTML5, Youtube or Vimeo player aiming to offer images synchronization and points of interest (chapters, tags).","title":"What's OpenVeo Player?"},{"location":"#compatibility","text":"OpenVeo Player has been tested on the following browsers: Google Chrome 58 Mozilla Firefox 52 Opera 45 Edge","title":"Compatibility"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"adaptive-streaming/","text":"Introduction OpenVeo Player support Adaptive Streaming DASH and HLS. It will automaticaly switch between protocols according browser capabilities. Prerequisites OpenVeo Player embeds Video.js to display the HTML player. Video.js natively supports HLS but in order to support DASH, you have to install and import dependencies: Install Dash.js: npm install dashjs@{DASH_JS_VERSION} Install videojs-contrib-dash plugin: npm install videojs-contrib-dash@{CONTRIB_DASH_VERSION} And import dependencies to use adaptive sources: script type= text/javascript src= lib/dashjs/dist/dash.all.min.js /script script type= text/javascript src= lib/videojs-contrib-dash/dist/videojs-dash.min.js /script How to play adaptive sources You need to define your adaptive sources by setting their mimetype and their link. $scope.data.sources = [ { adaptive: [ // The list of video adaptive sources (only for html player) { // Dash source height: 720, mimeType: 'application/dash+xml', link: 'https://host.local/openveo/mp4:bunny.mp4/manifest.mpd' }, { // HLS Source height: 720, mimeType: 'application/vnd.apple.mpegurl', link: 'https://host.local/openveo/mp4:bunny.mp4/manifest.m3u8' }, { // RTMP source mimeType: 'rtmp/mp4', link: 'rtmp://host.local/openveo/ mp4:bunny.mp4' } ], files : [ // The list of different resolutions sources for this video (only for html player) { width : 640, // Video width for this file height : 360, // Video height for this file link : 'https://host.local/pathToSmallMP4.mp4' // Video url }, { width : 1280, // Video width for this file height : 720, // Video height for this file link : 'https://host.local/pathToHDMP4.mp4' // Video url }, ... ] } ] And set you player type to 'html': opl-player ... opl-data= data opl-player-type= html /opl-player NB : \"Adaptive\" sources are always prioritized. \"files\" sources will be ignored if \"adaptive\" property is defined.","title":"Adaptive streaming"},{"location":"adaptive-streaming/#introduction","text":"OpenVeo Player support Adaptive Streaming DASH and HLS. It will automaticaly switch between protocols according browser capabilities.","title":"Introduction"},{"location":"adaptive-streaming/#prerequisites","text":"OpenVeo Player embeds Video.js to display the HTML player. Video.js natively supports HLS but in order to support DASH, you have to install and import dependencies: Install Dash.js: npm install dashjs@{DASH_JS_VERSION} Install videojs-contrib-dash plugin: npm install videojs-contrib-dash@{CONTRIB_DASH_VERSION} And import dependencies to use adaptive sources: script type= text/javascript src= lib/dashjs/dist/dash.all.min.js /script script type= text/javascript src= lib/videojs-contrib-dash/dist/videojs-dash.min.js /script","title":"Prerequisites"},{"location":"adaptive-streaming/#how-to-play-adaptive-sources","text":"You need to define your adaptive sources by setting their mimetype and their link. $scope.data.sources = [ { adaptive: [ // The list of video adaptive sources (only for html player) { // Dash source height: 720, mimeType: 'application/dash+xml', link: 'https://host.local/openveo/mp4:bunny.mp4/manifest.mpd' }, { // HLS Source height: 720, mimeType: 'application/vnd.apple.mpegurl', link: 'https://host.local/openveo/mp4:bunny.mp4/manifest.m3u8' }, { // RTMP source mimeType: 'rtmp/mp4', link: 'rtmp://host.local/openveo/ mp4:bunny.mp4' } ], files : [ // The list of different resolutions sources for this video (only for html player) { width : 640, // Video width for this file height : 360, // Video height for this file link : 'https://host.local/pathToSmallMP4.mp4' // Video url }, { width : 1280, // Video width for this file height : 720, // Video height for this file link : 'https://host.local/pathToHDMP4.mp4' // Video url }, ... ] } ] And set you player type to 'html': opl-player ... opl-data= data opl-player-type= html /opl-player NB : \"Adaptive\" sources are always prioritized. \"files\" sources will be ignored if \"adaptive\" property is defined.","title":"How to play adaptive sources"},{"location":"api/","text":"Introduction Player can be controlled by methods and emits catchable events on the player HTML element. Methods selectTemplate(template) Sets the display template. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.selectTemplate('split_2'); }); Arguments: Param Type Details template String Display template (can be either split_1 , split_50_50 , split_25_75 or split_2 ) playPause() Starts / Pauses the player. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.playPause(); }); setVolume(volume) Sets the player volume. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.setVolume(50); }); Arguments: Param Type Details volume Number The volume to set from 0 to 100 setTime(time) Sets the player time. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.setTime(50000); }); Arguments: Param Type Details time Number The time to set (in milliseconds) relative to the cut media setDefinition(definition) Sets actual media definition. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.setDefinition('720'); }); Arguments: Param Type Details definition String The definition height as String setSource Sets actual media source if multi sources. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.setSource(1); }); Arguments: Param Type Details source Number The index of the source to load from the list of sources Events ready The player is ready to receive actions. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); }); waiting Media playback has stopped because the next frame is not available. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('waiting', function(event){ console.log('waiting'); }); playing Media playback is ready to start after being paused or delayed due to lack of media data. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('playing', function(event){ console.log('playing'); }); durationChange The duration attribute has just been updated. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('durationChange', function(event, duration){ console.log('durationChange with new duration = ' + duration + 'ms'); }); play Media is no longer paused. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('play', function(event, duration){ console.log('play'); }); pause Media has been paused. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('pause', function(event, duration){ console.log('pause'); }); loadProgress Got buffering information. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('loadProgress', function(event, percents){ console.log('loadProgress'); console.log('Buffering start = ' + percents.loadedStart); console.log('Buffering end = ' + percents.loadedPercent); }); playProgress Media playback position has changed. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('playProgress', function(event, data){ console.log('playProgress'); console.log('Current time = ' + data.time + 'ms'); console.log('Played percent = ' + data.percent); }); end Media playback has reached the end. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('end', function(event, duration){ console.log('end'); }); error Player has encountered an error. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('error', function(event, error){ console.log(error.message); console.log(error.code); }); needPoiConversion Player has detected the old format of chapters / tags / indexes. Time of chapters / tags and indexes have to be expressed in milliseconds and not in percentage. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('needPoiConversion', function(event, duration){ console.log('needPoiConversion'); console.log('Video duration = ' + duration + 'ms'); });","title":"API"},{"location":"api/#introduction","text":"Player can be controlled by methods and emits catchable events on the player HTML element.","title":"Introduction"},{"location":"api/#methods","text":"","title":"Methods"},{"location":"api/#selecttemplatetemplate","text":"Sets the display template. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.selectTemplate('split_2'); }); Arguments: Param Type Details template String Display template (can be either split_1 , split_50_50 , split_25_75 or split_2 )","title":"selectTemplate(template)"},{"location":"api/#playpause","text":"Starts / Pauses the player. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.playPause(); });","title":"playPause()"},{"location":"api/#setvolumevolume","text":"Sets the player volume. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.setVolume(50); }); Arguments: Param Type Details volume Number The volume to set from 0 to 100","title":"setVolume(volume)"},{"location":"api/#settimetime","text":"Sets the player time. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.setTime(50000); }); Arguments: Param Type Details time Number The time to set (in milliseconds) relative to the cut media","title":"setTime(time)"},{"location":"api/#setdefinitiondefinition","text":"Sets actual media definition. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.setDefinition('720'); }); Arguments: Param Type Details definition String The definition height as String","title":"setDefinition(definition)"},{"location":"api/#setsource","text":"Sets actual media source if multi sources. Usage: var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); var playerController = angular.element(myPlayer).controller('oplPlayer'); playerController.setSource(1); }); Arguments: Param Type Details source Number The index of the source to load from the list of sources","title":"setSource"},{"location":"api/#events","text":"","title":"Events"},{"location":"api/#ready","text":"The player is ready to receive actions. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('ready', function(event){ console.log('ready'); });","title":"ready"},{"location":"api/#waiting","text":"Media playback has stopped because the next frame is not available. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('waiting', function(event){ console.log('waiting'); });","title":"waiting"},{"location":"api/#playing","text":"Media playback is ready to start after being paused or delayed due to lack of media data. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('playing', function(event){ console.log('playing'); });","title":"playing"},{"location":"api/#durationchange","text":"The duration attribute has just been updated. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('durationChange', function(event, duration){ console.log('durationChange with new duration = ' + duration + 'ms'); });","title":"durationChange"},{"location":"api/#play","text":"Media is no longer paused. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('play', function(event, duration){ console.log('play'); });","title":"play"},{"location":"api/#pause","text":"Media has been paused. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('pause', function(event, duration){ console.log('pause'); });","title":"pause"},{"location":"api/#loadprogress","text":"Got buffering information. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('loadProgress', function(event, percents){ console.log('loadProgress'); console.log('Buffering start = ' + percents.loadedStart); console.log('Buffering end = ' + percents.loadedPercent); });","title":"loadProgress"},{"location":"api/#playprogress","text":"Media playback position has changed. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('playProgress', function(event, data){ console.log('playProgress'); console.log('Current time = ' + data.time + 'ms'); console.log('Played percent = ' + data.percent); });","title":"playProgress"},{"location":"api/#end","text":"Media playback has reached the end. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('end', function(event, duration){ console.log('end'); });","title":"end"},{"location":"api/#error","text":"Player has encountered an error. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('error', function(event, error){ console.log(error.message); console.log(error.code); });","title":"error"},{"location":"api/#needpoiconversion","text":"Player has detected the old format of chapters / tags / indexes. Time of chapters / tags and indexes have to be expressed in milliseconds and not in percentage. var myPlayer = document.getElementById('myPlayer'); angular.element(myPlayer).on('needPoiConversion', function(event, duration){ console.log('needPoiConversion'); console.log('Video duration = ' + duration + 'ms'); });","title":"needPoiConversion"},{"location":"examples/","text":"Player HTML example You can use the HTML player to play a video by its url. The HTML player expects one media id with one source. index.html !DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css link rel= stylesheet type= text/css href= lib/video.js/dist/video-js.min.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= html opl-data= data /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/video.js/dist/video.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html app.js (function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId: ['136081112'], // The list of media ids, one id by source. For the html player, the first media id corresponds to the first source, the second media id to the second source and so on timecodes: [ // A list of indexes { timecode: 0, // The position of the index relative to the media duration (in milliseconds) image: { // The small and large version of the image representing the index small: 'https://host.local/image1-small.jpeg', // URL of the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80 large: 'https://host.local/image1-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged } }, { timecode: 1200, // The position of the index relative to the media duration (in milliseconds) image: { // The small and large version of the image representing the index small: { url: 'https://host.local/sprite.jpeg', // URL of the sprite containing the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80 x: 142, // x coordinate of the small image inside the sprite image y: 0 // y coordinate of the small image inside the sprite image }, large: 'https://host.local/image2-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged } } ], sources: [ // The list of sources, one source by media id (only for the html player) { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4.mp4' // The URL of the MP4 file } ] } ], thumbnail: https://host.local/thumbnail.jpg , // The URL of the image to display before the video starts (only for the html player) chapters: [ // A list of chapters { name: 'Simple chapter', // The chapter name displayed in the list of chapters and when a chapter is enlarged description: 'Chapter 1 description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags value: 1000 // The position of the chapter relative to the media duration (in milliseconds) }, { name: 'Chapter with attached file', // // The chapter name displayed in the list of chapters and when a chapter is enlarged description: 'Chapter with attached file description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags value: 2000, // The position of the chapter relative to the media duration (in milliseconds) file: { // A file attached to the chapter url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the chapter originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension) } } ], tags: [ // A list of tags { name: 'Simple tag', // The tag name displayed in the list of tags and when a tag is enlarged description: 'Simple tag description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags value: 1000 // The position of the tag relative to the media duration (in milliseconds) }, { name: 'Tag with attached file', // The tag name displayed in the list of tags and when a tag is enlarged description: 'Tag with attached file description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags value: 2000, // The position of the tag relative to the media duration (in milliseconds) file: { // A file attached to the tag url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the tag originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension) } } ], cut: [ // The list of cuts to apply to the media, for now only start and end cuts are available { type: 'begin', // The cut type (either begin or end ) value: 0 // The position of the cut relative to the media duration (in milliseconds) }, { type: 'end', // The cut type (either begin or end ) value: 10000 // The position of the cut relative to the media duration (in milliseconds) } ] }; } })(angular); Player HTML Multi-sources example You can also use the HTML player to play several sources (different viewpoint for example). The HTML player expects one or several media ids with one or several sources. The first media id corresponds to the first source, the second media id corresponds to the second source and so on. index.html !DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css link rel= stylesheet type= text/css href= lib/video.js/dist/video-js.min.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= html opl-data= data /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/video.js/dist/video.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html app.js (function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId: ['136081112', '136081113'], // The list of media ids, one id by source. For the html player, the first media id corresponds to the first source, the second media id to the second source and so on sources: [ // The list of sources, one source by media id (only for the html player) { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4-136081112.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4-136081113.mp4' // The URL of the MP4 file }, ... ] }, { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4-136081113.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4-136081113.mp4' // The URL of the MP4 file }, ... ] } ], [...] }; } })(angular); Player Vimeo example You can use Vimeo player to play a video hosted on Vimeo platform using Vimeo player. The Vimeo player expects the id of the media hosted on Vimeo. You can specify several media ids for multi sources (multi viewpoint). index.html !DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= vimeo opl-data= data /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html app.js (function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId: ['136081112'], // The id(s) of the source(s) on Vimeo platform [...] }; } })(angular); Player Youtube example You can use Youtube player to play a video hosted on Youtube platform using Youtube player. The Youtube player expects the id of the media hosted on Youtube. You can specify several media ids for multi sources (multi viewpoint). index.html !DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= youtube opl-data= data /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html app.js (function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId : ['136081112'], // The id(s) of the source(s) on Youtube platform [...] }; } })(angular); Player API example You can interact with the player using the API. index.html !DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css link rel= stylesheet type= text/css href= lib/video.js/dist/video-js.min.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= html opl-data= data ng-show= ready id= myPlayer /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/video.js/dist/video.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html app.js (function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId: ['136081112'], // The list of media ids, one id by source. For the html player, the first media id corresponds to the first source, the second media id to the second source and so on sources: [ // The list of sources, one source by media id (only for the html player) { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4-136081112.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4-136081112.mp4' // The URL of the MP4 file } ] } ] }; var myPlayer = document.getElementById('myPlayer'); // Listen to ready event angular.element(myPlayer).on('ready', function(event) { console.log('ready'); $scope.ready = true; var playerController = angular.element(myPlayer).controller('oplPlayer'); // Selects a new display template ('split_2') playerController.selectTemplate('split_2'); // Starts / Pauses the player playerController.playPause(); // Sets volume to 10% playerController.setVolume(10); // Seeks media to time 20s playerController.setTime(20000); // Changes media source playerController.setSource(1); }); angular.element(myPlayer).on('waiting', function(event) { console.log('waiting'); }); angular.element(myPlayer).on('playing', function(event) { console.log('playing'); }); angular.element(myPlayer).on('durationChange', function(event, duration) { console.log('durationChange with new duration = ' + duration + 'ms'); }); angular.element(myPlayer).on('play', function(event) { console.log('play'); }); angular.element(myPlayer).on('pause', function(event) { console.log('pause'); }); angular.element(myPlayer).on('loadProgress', function(event, percents) { console.log('loadProgress'); console.log('Buffering start = ' + percents.loadedStart); console.log('Buffering end = ' + percents.loadedPercent); }); angular.element(myPlayer).on('playProgress', function(event, data) { console.log('playProgress'); console.log('Current time = ' + data.time + 'ms'); console.log('Played percent = ' + data.percent); }); angular.element(myPlayer).on('end', function(event) { console.log('end'); }); angular.element(myPlayer).on('error', function(event, error) { console.log(error.message); console.log(error.code); }); } })(angular);","title":"Examples"},{"location":"examples/#player-html-example","text":"You can use the HTML player to play a video by its url. The HTML player expects one media id with one source.","title":"Player HTML example"},{"location":"examples/#indexhtml","text":"!DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css link rel= stylesheet type= text/css href= lib/video.js/dist/video-js.min.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= html opl-data= data /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/video.js/dist/video.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html","title":"index.html"},{"location":"examples/#appjs","text":"(function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId: ['136081112'], // The list of media ids, one id by source. For the html player, the first media id corresponds to the first source, the second media id to the second source and so on timecodes: [ // A list of indexes { timecode: 0, // The position of the index relative to the media duration (in milliseconds) image: { // The small and large version of the image representing the index small: 'https://host.local/image1-small.jpeg', // URL of the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80 large: 'https://host.local/image1-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged } }, { timecode: 1200, // The position of the index relative to the media duration (in milliseconds) image: { // The small and large version of the image representing the index small: { url: 'https://host.local/sprite.jpeg', // URL of the sprite containing the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80 x: 142, // x coordinate of the small image inside the sprite image y: 0 // y coordinate of the small image inside the sprite image }, large: 'https://host.local/image2-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged } } ], sources: [ // The list of sources, one source by media id (only for the html player) { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4.mp4' // The URL of the MP4 file } ] } ], thumbnail: https://host.local/thumbnail.jpg , // The URL of the image to display before the video starts (only for the html player) chapters: [ // A list of chapters { name: 'Simple chapter', // The chapter name displayed in the list of chapters and when a chapter is enlarged description: 'Chapter 1 description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags value: 1000 // The position of the chapter relative to the media duration (in milliseconds) }, { name: 'Chapter with attached file', // // The chapter name displayed in the list of chapters and when a chapter is enlarged description: 'Chapter with attached file description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags value: 2000, // The position of the chapter relative to the media duration (in milliseconds) file: { // A file attached to the chapter url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the chapter originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension) } } ], tags: [ // A list of tags { name: 'Simple tag', // The tag name displayed in the list of tags and when a tag is enlarged description: 'Simple tag description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags value: 1000 // The position of the tag relative to the media duration (in milliseconds) }, { name: 'Tag with attached file', // The tag name displayed in the list of tags and when a tag is enlarged description: 'Tag with attached file description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags value: 2000, // The position of the tag relative to the media duration (in milliseconds) file: { // A file attached to the tag url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the tag originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension) } } ], cut: [ // The list of cuts to apply to the media, for now only start and end cuts are available { type: 'begin', // The cut type (either begin or end ) value: 0 // The position of the cut relative to the media duration (in milliseconds) }, { type: 'end', // The cut type (either begin or end ) value: 10000 // The position of the cut relative to the media duration (in milliseconds) } ] }; } })(angular);","title":"app.js"},{"location":"examples/#player-html-multi-sources-example","text":"You can also use the HTML player to play several sources (different viewpoint for example). The HTML player expects one or several media ids with one or several sources. The first media id corresponds to the first source, the second media id corresponds to the second source and so on.","title":"Player HTML Multi-sources example"},{"location":"examples/#indexhtml_1","text":"!DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css link rel= stylesheet type= text/css href= lib/video.js/dist/video-js.min.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= html opl-data= data /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/video.js/dist/video.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html","title":"index.html"},{"location":"examples/#appjs_1","text":"(function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId: ['136081112', '136081113'], // The list of media ids, one id by source. For the html player, the first media id corresponds to the first source, the second media id to the second source and so on sources: [ // The list of sources, one source by media id (only for the html player) { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4-136081112.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4-136081113.mp4' // The URL of the MP4 file }, ... ] }, { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4-136081113.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4-136081113.mp4' // The URL of the MP4 file }, ... ] } ], [...] }; } })(angular);","title":"app.js"},{"location":"examples/#player-vimeo-example","text":"You can use Vimeo player to play a video hosted on Vimeo platform using Vimeo player. The Vimeo player expects the id of the media hosted on Vimeo. You can specify several media ids for multi sources (multi viewpoint).","title":"Player Vimeo example"},{"location":"examples/#indexhtml_2","text":"!DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= vimeo opl-data= data /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html","title":"index.html"},{"location":"examples/#appjs_2","text":"(function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId: ['136081112'], // The id(s) of the source(s) on Vimeo platform [...] }; } })(angular);","title":"app.js"},{"location":"examples/#player-youtube-example","text":"You can use Youtube player to play a video hosted on Youtube platform using Youtube player. The Youtube player expects the id of the media hosted on Youtube. You can specify several media ids for multi sources (multi viewpoint).","title":"Player Youtube example"},{"location":"examples/#indexhtml_3","text":"!DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= youtube opl-data= data /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html","title":"index.html"},{"location":"examples/#appjs_3","text":"(function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId : ['136081112'], // The id(s) of the source(s) on Youtube platform [...] }; } })(angular);","title":"app.js"},{"location":"examples/#player-api-example","text":"You can interact with the player using the API.","title":"Player API example"},{"location":"examples/#indexhtml_4","text":"!DOCTYPE html html ng-app= test.player ng-controller= TestController ng-strict-di head link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css link rel= stylesheet type= text/css href= lib/video.js/dist/video-js.min.css !--[if lt IE 9] script src= lib/html5shiv.min.js /script ![endif]-- /head body opl-player opl-player-type= html opl-data= data ng-show= ready id= myPlayer /opl-player script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script script type= text/javascript src= lib/video.js/dist/video.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script script type= text/javascript src= app.js /script /body /html","title":"index.html"},{"location":"examples/#appjs_4","text":"(function(angular) { 'use strict'; var app = angular.module('test.player', ['ov.player']); app.controller('TestController', TestController); TestController.$inject = ['$scope']; /** * Defines the test controller. */ function TestController($scope) { $scope.data = { mediaId: ['136081112'], // The list of media ids, one id by source. For the html player, the first media id corresponds to the first source, the second media id to the second source and so on sources: [ // The list of sources, one source by media id (only for the html player) { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4-136081112.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4-136081112.mp4' // The URL of the MP4 file } ] } ] }; var myPlayer = document.getElementById('myPlayer'); // Listen to ready event angular.element(myPlayer).on('ready', function(event) { console.log('ready'); $scope.ready = true; var playerController = angular.element(myPlayer).controller('oplPlayer'); // Selects a new display template ('split_2') playerController.selectTemplate('split_2'); // Starts / Pauses the player playerController.playPause(); // Sets volume to 10% playerController.setVolume(10); // Seeks media to time 20s playerController.setTime(20000); // Changes media source playerController.setSource(1); }); angular.element(myPlayer).on('waiting', function(event) { console.log('waiting'); }); angular.element(myPlayer).on('playing', function(event) { console.log('playing'); }); angular.element(myPlayer).on('durationChange', function(event, duration) { console.log('durationChange with new duration = ' + duration + 'ms'); }); angular.element(myPlayer).on('play', function(event) { console.log('play'); }); angular.element(myPlayer).on('pause', function(event) { console.log('pause'); }); angular.element(myPlayer).on('loadProgress', function(event, percents) { console.log('loadProgress'); console.log('Buffering start = ' + percents.loadedStart); console.log('Buffering end = ' + percents.loadedPercent); }); angular.element(myPlayer).on('playProgress', function(event, data) { console.log('playProgress'); console.log('Current time = ' + data.time + 'ms'); console.log('Played percent = ' + data.percent); }); angular.element(myPlayer).on('end', function(event) { console.log('end'); }); angular.element(myPlayer).on('error', function(event, error) { console.log(error.message); console.log(error.code); }); } })(angular);","title":"app.js"},{"location":"getting-started/","text":"Introduction OpenVeo Player defines an AngularJS directive opl-player : opl-player opl-data= data opl-fullscreen-icon= true opl-volume-icon= true opl-template= split_50_50 opl-template-icon= true opl-settings-icon= true opl-veo-labs-icon= true opl-time= true opl-full-viewport= false opl-language= en opl-player-type= html opl-auto-play= false opl-remember-position= false opl-chapters= true opl-indexes= true opl-tags= true opl-cuts= true opl-start-time= 2000 /opl-player This directive creates a video player with images synchronization and chapters. Include player CSS link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css !-- Only for HTML type-- link rel= stylesheet type= text/css href= lib/video.js/dist/video-js.min.css Include scripts script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script !-- Only for HTML type -- script type= text/javascript src= lib/video.js/dist/video.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script Nb : Video.js library must be included before including the OpenVeo Player script. Attributes opl-player directive attributes helps you customize the player. opl-data Sets player data, points of interest and cuts. $scope.data = { mediaId: ['34532ezr54sdf87', 'dzzfeg4547841'], // The list of media ids, one id by source. For the html player, the first media id corresponds to the first source, the second media id to the second source and so on timecodes: [ // A list of indexes { timecode: 0, // The position of the index relative to the media duration (in milliseconds) image: { // The small and large version of the image representing the index small: 'https://host.local/image1-small.jpeg', // URL of the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80 large: 'https://host.local/image1-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged } }, { timecode: 1200, // The position of the index relative to the media duration (in milliseconds) image: { // The small and large version of the image representing the index small: { url: 'https://host.local/sprite.jpeg', // URL of the sprite containing the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80 x: 142, // x coordinate of the small image inside the sprite image y: 0 // y coordinate of the small image inside the sprite image }, large: 'https://host.local/image2-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged } }, ... ], sources: [ // The list of sources, one source by media id (only for the html player) { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4-34532ezr54sdf87.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4-34532ezr54sdf87.mp4' // The URL of the MP4 file }, ... ] }, { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP42-dzzfeg4547841.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP42-dzzfeg4547841.mp4' // The URL of the MP4 file }, ... ] } ], thumbnail: https://host.local/thumbnail.jpg , // The URL of the image to display before the video starts (only for the html player) chapters: [ // A list of chapters { name: 'Simple chapter', // The chapter name displayed in the list of chapters and when a chapter is enlarged description: 'Chapter 1 description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags value: 1000 // The position of the chapter relative to the media duration (in milliseconds) }, { name: 'Chapter with attached file', // // The chapter name displayed in the list of chapters and when a chapter is enlarged description: 'Chapter with attached file description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags value: 2000, // The position of the chapter relative to the media duration (in milliseconds) file: { // A file attached to the chapter url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the chapter originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension) } }, ... ], tags : [ // tags { name: 'Simple tag', // The tag name displayed in the list of tags and when a tag is enlarged description: 'Simple tag description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags value: 1000 // The position of the tag relative to the media duration (in milliseconds) }, { name: 'Tag with attached file', // The tag name displayed in the list of tags and when a tag is enlarged description: 'Tag with attached file description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags value: 2000, // The position of the tag relative to the media duration (in milliseconds) file: { // A file attached to the tag url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the tag originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension) } }, ... ], cut: [ // The list of cuts to apply to the media, for now only start and end cuts are available { type: 'begin', // The cut type (either begin or end ) value: 0 // The position of the cut relative to the media duration (in milliseconds) }, { type: 'end', // The cut type (either begin or end ) value: 10000 // The position of the cut relative to the media duration (in milliseconds) } ] } opl-player ... opl-data= data /opl-player opl-full-viewport (optional) Indicates if player must take the full viewport or not (Default to false ). opl-player ... opl-full-viewport= false /opl-player opl-time (optional) Indicates if video time / duration must be displayed or not (Default to true ). opl-player ... opl-time= true /opl-player opl-fullscreen-icon (optional) Indicates if fullscreen icon must be displayed or not (Default to true ). Note that even if this option is set to true, this icon can be hidden on devices/browsers without support for Javascript Fullscreen API. opl-player ... opl-fullscreen-icon= true /opl-player opl-volume-icon (optional) Indicates if volume icon must be displayed or not (Default to true ). opl-player ... opl-volume-icon= true /opl-player opl-template-icon (optional) Indicates if template selector icon must be displayed or not (Default to true ). opl-player ... opl-template-icon= true /opl-player opl-settings-icon (optional) Indicates if settings icon must be displayed or not (Default to true ). opl-player ... opl-settings-icon= true /opl-player opl-veo-labs-icon (optional) Indicates if Veo-Labs icon must be displayed or not (Default to true ). opl-player ... opl-veo-labs-icon= true /opl-player opl-language (optional) Indicates player language. (Default to en ) Supported values are: fr en opl-player ... opl-language= en /opl-player opl-player-type (optional) Indicates player type. (Default to html ) Supported values are: vimeo youtube html opl-player ... opl-player-type= html /opl-player opl-auto-play (optional) Indicates if player must automatically start when media is ready. (Default to false ) opl-player ... opl-auto-play= false /opl-player opl-remember-position (optional) Indicates if player must automatically start at time which video has previously been stopped. (Default to false ) opl-player ... opl-remember-position= false /opl-player opl-chapters (optional) Indicates if chapters must be displayed or not (Default to true ). opl-player ... opl-chapters= true /opl-player opl-indexes (optional) Indicates if indexes must be displayed or not (Default to true ). opl-player ... opl-indexes= true /opl-player opl-tags (optional) Indicates if tags must be displayed or not (Default to true ). opl-player ... opl-tags= true /opl-player opl-cuts (optional) Indicates if cuts must be enabled or not (Default to true ). opl-player ... opl-cuts= true /opl-player opl-template (optional) Indicates the template to use. Could be either \"split_50_50\", \"split_1\", \"split_2\" or \"split_25_75\" (Default to split_50_50 ) $scope.template = 'split_50_50'; opl-player ... opl-template= template /opl-player opl-start-time (optional) Indicates the time the player will start at in milliseconds (Default to 0 ). opl-player ... opl-start-time= 2000 /opl-player","title":"Getting started"},{"location":"getting-started/#introduction","text":"OpenVeo Player defines an AngularJS directive opl-player : opl-player opl-data= data opl-fullscreen-icon= true opl-volume-icon= true opl-template= split_50_50 opl-template-icon= true opl-settings-icon= true opl-veo-labs-icon= true opl-time= true opl-full-viewport= false opl-language= en opl-player-type= html opl-auto-play= false opl-remember-position= false opl-chapters= true opl-indexes= true opl-tags= true opl-cuts= true opl-start-time= 2000 /opl-player This directive creates a video player with images synchronization and chapters.","title":"Introduction"},{"location":"getting-started/#include-player-css","text":"link rel= stylesheet type= text/css href= lib/openveo-player/dist/openveo-player.css !-- Only for HTML type-- link rel= stylesheet type= text/css href= lib/video.js/dist/video-js.min.css","title":"Include player CSS"},{"location":"getting-started/#include-scripts","text":"script type= text/javascript src= lib/angular/angular.min.js /script script type= text/javascript src= lib/angular-cookies/angular-cookies.min.js /script !-- Only for HTML type -- script type= text/javascript src= lib/video.js/dist/video.min.js /script script type= text/javascript src= lib/openveo-player/dist/openveo-player.min.js /script Nb : Video.js library must be included before including the OpenVeo Player script.","title":"Include scripts"},{"location":"getting-started/#attributes","text":"opl-player directive attributes helps you customize the player.","title":"Attributes"},{"location":"getting-started/#opl-data","text":"Sets player data, points of interest and cuts. $scope.data = { mediaId: ['34532ezr54sdf87', 'dzzfeg4547841'], // The list of media ids, one id by source. For the html player, the first media id corresponds to the first source, the second media id to the second source and so on timecodes: [ // A list of indexes { timecode: 0, // The position of the index relative to the media duration (in milliseconds) image: { // The small and large version of the image representing the index small: 'https://host.local/image1-small.jpeg', // URL of the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80 large: 'https://host.local/image1-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged } }, { timecode: 1200, // The position of the index relative to the media duration (in milliseconds) image: { // The small and large version of the image representing the index small: { url: 'https://host.local/sprite.jpeg', // URL of the sprite containing the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80 x: 142, // x coordinate of the small image inside the sprite image y: 0 // y coordinate of the small image inside the sprite image }, large: 'https://host.local/image2-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged } }, ... ], sources: [ // The list of sources, one source by media id (only for the html player) { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP4-34532ezr54sdf87.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP4-34532ezr54sdf87.mp4' // The URL of the MP4 file }, ... ] }, { files: [ // A list of MP4 files (qualities) { width: 640, // The video width in pixels height: 360, // The video height in pixels link: 'https://host.local/pathToSDMP42-dzzfeg4547841.mp4' // The URL of the MP4 file }, { width: 1280, // The video width in pixels height: 720, // The video height in pixels link: 'https://host.local/pathToHDMP42-dzzfeg4547841.mp4' // The URL of the MP4 file }, ... ] } ], thumbnail: https://host.local/thumbnail.jpg , // The URL of the image to display before the video starts (only for the html player) chapters: [ // A list of chapters { name: 'Simple chapter', // The chapter name displayed in the list of chapters and when a chapter is enlarged description: 'Chapter 1 description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags value: 1000 // The position of the chapter relative to the media duration (in milliseconds) }, { name: 'Chapter with attached file', // // The chapter name displayed in the list of chapters and when a chapter is enlarged description: 'Chapter with attached file description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags value: 2000, // The position of the chapter relative to the media duration (in milliseconds) file: { // A file attached to the chapter url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the chapter originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension) } }, ... ], tags : [ // tags { name: 'Simple tag', // The tag name displayed in the list of tags and when a tag is enlarged description: 'Simple tag description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags value: 1000 // The position of the tag relative to the media duration (in milliseconds) }, { name: 'Tag with attached file', // The tag name displayed in the list of tags and when a tag is enlarged description: 'Tag with attached file description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags value: 2000, // The position of the tag relative to the media duration (in milliseconds) file: { // A file attached to the tag url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the tag originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension) } }, ... ], cut: [ // The list of cuts to apply to the media, for now only start and end cuts are available { type: 'begin', // The cut type (either begin or end ) value: 0 // The position of the cut relative to the media duration (in milliseconds) }, { type: 'end', // The cut type (either begin or end ) value: 10000 // The position of the cut relative to the media duration (in milliseconds) } ] } opl-player ... opl-data= data /opl-player","title":"opl-data"},{"location":"getting-started/#opl-full-viewport-optional","text":"Indicates if player must take the full viewport or not (Default to false ). opl-player ... opl-full-viewport= false /opl-player","title":"opl-full-viewport (optional)"},{"location":"getting-started/#opl-time-optional","text":"Indicates if video time / duration must be displayed or not (Default to true ). opl-player ... opl-time= true /opl-player","title":"opl-time (optional)"},{"location":"getting-started/#opl-fullscreen-icon-optional","text":"Indicates if fullscreen icon must be displayed or not (Default to true ). Note that even if this option is set to true, this icon can be hidden on devices/browsers without support for Javascript Fullscreen API. opl-player ... opl-fullscreen-icon= true /opl-player","title":"opl-fullscreen-icon (optional)"},{"location":"getting-started/#opl-volume-icon-optional","text":"Indicates if volume icon must be displayed or not (Default to true ). opl-player ... opl-volume-icon= true /opl-player","title":"opl-volume-icon (optional)"},{"location":"getting-started/#opl-template-icon-optional","text":"Indicates if template selector icon must be displayed or not (Default to true ). opl-player ... opl-template-icon= true /opl-player","title":"opl-template-icon (optional)"},{"location":"getting-started/#opl-settings-icon-optional","text":"Indicates if settings icon must be displayed or not (Default to true ). opl-player ... opl-settings-icon= true /opl-player","title":"opl-settings-icon (optional)"},{"location":"getting-started/#opl-veo-labs-icon-optional","text":"Indicates if Veo-Labs icon must be displayed or not (Default to true ). opl-player ... opl-veo-labs-icon= true /opl-player","title":"opl-veo-labs-icon (optional)"},{"location":"getting-started/#opl-language-optional","text":"Indicates player language. (Default to en ) Supported values are: fr en opl-player ... opl-language= en /opl-player","title":"opl-language (optional)"},{"location":"getting-started/#opl-player-type-optional","text":"Indicates player type. (Default to html ) Supported values are: vimeo youtube html opl-player ... opl-player-type= html /opl-player","title":"opl-player-type (optional)"},{"location":"getting-started/#opl-auto-play-optional","text":"Indicates if player must automatically start when media is ready. (Default to false ) opl-player ... opl-auto-play= false /opl-player","title":"opl-auto-play (optional)"},{"location":"getting-started/#opl-remember-position-optional","text":"Indicates if player must automatically start at time which video has previously been stopped. (Default to false ) opl-player ... opl-remember-position= false /opl-player","title":"opl-remember-position (optional)"},{"location":"getting-started/#opl-chapters-optional","text":"Indicates if chapters must be displayed or not (Default to true ). opl-player ... opl-chapters= true /opl-player","title":"opl-chapters (optional)"},{"location":"getting-started/#opl-indexes-optional","text":"Indicates if indexes must be displayed or not (Default to true ). opl-player ... opl-indexes= true /opl-player","title":"opl-indexes (optional)"},{"location":"getting-started/#opl-tags-optional","text":"Indicates if tags must be displayed or not (Default to true ). opl-player ... opl-tags= true /opl-player","title":"opl-tags (optional)"},{"location":"getting-started/#opl-cuts-optional","text":"Indicates if cuts must be enabled or not (Default to true ). opl-player ... opl-cuts= true /opl-player","title":"opl-cuts (optional)"},{"location":"getting-started/#opl-template-optional","text":"Indicates the template to use. Could be either \"split_50_50\", \"split_1\", \"split_2\" or \"split_25_75\" (Default to split_50_50 ) $scope.template = 'split_50_50'; opl-player ... opl-template= template /opl-player","title":"opl-template (optional)"},{"location":"getting-started/#opl-start-time-optional","text":"Indicates the time the player will start at in milliseconds (Default to 0 ). opl-player ... opl-start-time= 2000 /opl-player","title":"opl-start-time (optional)"},{"location":"prerequisites/","text":"OpenVeo Player requires and has been tested with: AngularJS ( =1.5.11 ) AngularJS cookies ( =1.5.11 ) To play video with HTML5 player, OpenVeo requires: Video.js ( =7.* )","title":"Prerequisites"},{"location":"developers/basics/","text":"Components OpenVeo Player defines an opl-player component with several sub components: opl-preview Used to display the index preview when cursor is over the timebar opl-slider Used to display the timebar opl-volume Used to display the volume controller (makes use of the opl-slider) opl-toggle-icon-button Used for all toggle buttons opl-template-selector Used to select a display template opl-settings Used to set current quality and source opl-tabs and opl-view Used to display points of interest as tabs opl-tiles and opl-tile Used to display the list of tags, the list of chapters and the list of indexes Players Each player (HTML, Youtube, Vimeo) as its own implementation and associated template.","title":"The basics"},{"location":"developers/basics/#components","text":"OpenVeo Player defines an opl-player component with several sub components: opl-preview Used to display the index preview when cursor is over the timebar opl-slider Used to display the timebar opl-volume Used to display the volume controller (makes use of the opl-slider) opl-toggle-icon-button Used for all toggle buttons opl-template-selector Used to select a display template opl-settings Used to set current quality and source opl-tabs and opl-view Used to display points of interest as tabs opl-tiles and opl-tile Used to display the list of tags, the list of chapters and the list of indexes","title":"Components"},{"location":"developers/basics/#players","text":"Each player (HTML, Youtube, Vimeo) as its own implementation and associated template.","title":"Players"},{"location":"developers/coding-standards/","text":"OpenVeo Player uses Node.js coding standards. ESLint is used to validate coding rules. You can launch a code verification using the following command: grunt eslint","title":"Coding standards"},{"location":"developers/compilation/","text":"Introduction OpenVeo player is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance. Compiling the OpenVeo Player You can compile the OpenVeo Player with source maps using the following command: grunt dist You can add the --production option to compile without source maps (for production): grunt dist --production","title":"CSS / SASS / JS compilation"},{"location":"developers/compilation/#introduction","text":"OpenVeo player is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.","title":"Introduction"},{"location":"developers/compilation/#compiling-the-openveo-player","text":"You can compile the OpenVeo Player with source maps using the following command: grunt dist You can add the --production option to compile without source maps (for production): grunt dist --production","title":"Compiling the OpenVeo Player"},{"location":"developers/i18n/","text":"OpenVeo Player translations are defined in ov.player module constant oplI18nTranslations .","title":"I18N and I10N"},{"location":"developers/installation/","text":"Clone project from git git clone git@github.com:veo-labs/openveo-player.git Install project's dependencies cd openveo-player npm install","title":"Installation"},{"location":"developers/installation/#clone-project-from-git","text":"git clone git@github.com:veo-labs/openveo-player.git","title":"Clone project from git"},{"location":"developers/installation/#install-projects-dependencies","text":"cd openveo-player npm install","title":"Install project's dependencies"},{"location":"developers/prerequisites/","text":"OpenVeo Player requires additional elements for development: Git - openveo-player is versioned with git Ruby / Sass / Compass - CSS is written using SASS / Compass Karma - Unit tested are performed using karma Grunt - Grunt is used to launch unit tests and compile sources","title":"Prerequisites"},{"location":"developers/unit-tests/","text":"Unit tests are performed using Karma . You can launch unit tests with the following command: grunt test","title":"Unit tests"}]}