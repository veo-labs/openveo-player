{
    "docs": [
        {
            "location": "/",
            "text": "What's OpenVeo Player?\n\n\nOpenVeo Player is an \nAngularJS\n component to wrap an HTML5, Youtube or Vimeo player aiming to offer images synchronization and points of interest (chapters, tags).\n\n\nCompatibility\n\n\nOpenVeo Player has been tested on the following browsers:\n\n\n\n\nGoogle Chrome 58\n\n\nMozilla Firefox 52\n\n\nOpera 45\n\n\nEdge\n\n\n\n\n\n\n\n\n\n\n\n\nScreenshots",
            "title": "INTRODUCTION"
        },
        {
            "location": "/#whats-openveo-player",
            "text": "OpenVeo Player is an  AngularJS  component to wrap an HTML5, Youtube or Vimeo player aiming to offer images synchronization and points of interest (chapters, tags).",
            "title": "What's OpenVeo Player?"
        },
        {
            "location": "/#compatibility",
            "text": "OpenVeo Player has been tested on the following browsers:   Google Chrome 58  Mozilla Firefox 52  Opera 45  Edge",
            "title": "Compatibility"
        },
        {
            "location": "/#screenshots",
            "text": "",
            "title": "Screenshots"
        },
        {
            "location": "/prerequisites/",
            "text": "OpenVeo Player requires and has been tested with:\n\n\n\n\nAngularJS\n (\n>=1.5.11\n)\n\n\nAngularJS cookies\n (\n>=1.5.11\n)\n\n\n\n\nTo play video with HTML5 player, OpenVeo requires:\n\n\n\n\nVideo.js\n (\n=7.*\n)",
            "title": "Prerequisites"
        },
        {
            "location": "/getting-started/",
            "text": "Introduction\n\n\nOpenVeo Player defines an AngularJS directive \nopl-player\n:\n\n\n<opl-player\n  opl-data=\"data\"\n  opl-fullscreen-icon=\"true\"\n  opl-volume-icon=\"true\"\n  opl-template=\"split_50_50\"\n  opl-template-icon=\"true\"\n  opl-settings-icon=\"true\"\n  opl-veo-labs-icon=\"true\"\n  opl-time=\"true\"\n  opl-full-viewport=\"false\"\n  opl-language=\"en\"\n  opl-player-type=\"html\"\n  opl-auto-play=\"false\"\n  opl-remember-position=\"false\"\n  opl-chapters=\"true\"\n  opl-indexes=\"true\"\n  opl-tags=\"true\"\n  opl-cuts=\"true\"\n></opl-player>\n\n\n\n\nThis directive creates a video player with images synchronization and chapters.\n\n\n\n\nInclude player CSS\n\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n<!-- Only for HTML type-->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n\n\n\n\nInclude scripts\n\n\n<script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n<script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n\n<!-- Only for HTML type -->\n<script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n<script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n\n\n\n\nNb :\n \nVideo.js\n library must be included before including the OpenVeo Player script.\n\n\nAttributes\n\n\nopl-player\n directive attributes helps you customize the player.\n\n\nopl-data\n\n\nSets player data, points of interest and cuts.\n\n\n$scope.data = {\n  mediaId: ['34532ezr54sdf87', 'dzzfeg4547841'], // The list of media ids, one id by source. For the \"html\" player, the first media id corresponds to the first source, the second media id to the second source and so on\n  timecodes: [ // A list of indexes\n    {\n      timecode: 0, // The position of the index relative to the media duration (in milliseconds)\n      image: { // The small and large version of the image representing the index\n        small: 'https://host.local/image1-small.jpeg', // URL of the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80\n        large: 'https://host.local/image1-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged\n      }\n    },\n    {\n      timecode: 1200, // The position of the index relative to the media duration (in milliseconds)\n      image: { // The small and large version of the image representing the index\n        small: {\n          url: 'https://host.local/sprite.jpeg', // URL of the sprite containing the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80\n          x: 142, // x coordinate of the small image inside the sprite image\n          y: 0 // y coordinate of the small image inside the sprite image\n        },\n        large: 'https://host.local/image2-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged\n      }\n    },\n    ...\n  ],\n  sources: [ // The list of sources, one source by media id (only for the \"html\" player)\n    {\n      files: [ // A list of MP4 files (qualities)\n        {\n          width: 640, // The video width in pixels\n          height: 360, // The video height in pixels\n          link: 'https://host.local/pathToSDMP4-34532ezr54sdf87.mp4' // The URL of the MP4 file\n        },\n        {\n          width: 1280, // The video width in pixels\n          height: 720, // The video height in pixels\n          link: 'https://host.local/pathToHDMP4-34532ezr54sdf87.mp4' // The URL of the MP4 file\n        },\n        ...\n      ]\n    },\n    {\n      files: [ // A list of MP4 files (qualities)\n        {\n          width: 640, // The video width in pixels\n          height: 360, // The video height in pixels\n          link: 'https://host.local/pathToSDMP42-dzzfeg4547841.mp4' // The URL of the MP4 file\n        },\n        {\n          width: 1280, // The video width in pixels\n          height: 720, // The video height in pixels\n          link: 'https://host.local/pathToHDMP42-dzzfeg4547841.mp4' // The URL of the MP4 file\n        },\n        ...\n      ]\n    }\n  ],\n  thumbnail: \"https://host.local/thumbnail.jpg\", // The URL of the image to display before the video starts (only for the \"html\" player)\n  chapters: [ // A list of chapters\n    {\n      name: 'Simple chapter', // The chapter name displayed in the list of chapters and when a chapter is enlarged\n      description: 'Chapter 1 description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags\n      value: 1000 // The position of the chapter relative to the media duration (in milliseconds)\n    },\n    {\n      name: 'Chapter with attached file', // // The chapter name displayed in the list of chapters and when a chapter is enlarged\n      description: 'Chapter with attached file description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags\n      value: 2000, // The position of the chapter relative to the media duration (in milliseconds)\n      file: { // A file attached to the chapter\n        url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the chapter\n        originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension)\n      }\n    },\n    ...\n  ],\n  tags : [ // tags\n    {\n      name: 'Simple tag', // The tag name displayed in the list of tags and when a tag is enlarged\n      description: 'Simple tag description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags\n      value: 1000 // The position of the tag relative to the media duration (in milliseconds)\n    },\n    {\n      name: 'Tag with attached file', // The tag name displayed in the list of tags and when a tag is enlarged\n      description: 'Tag with attached file description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags\n      value: 2000, // The position of the tag relative to the media duration (in milliseconds)\n      file: { // A file attached to the tag\n        url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the tag\n        originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension)\n      }\n    },\n    ...\n  ],\n  cut: [ // The list of cuts to apply to the media, for now only start and end cuts are available\n    {\n      type: 'begin', // The cut type (either \"begin\" or \"end\")\n      value: 0 // The position of the cut relative to the media duration (in milliseconds)\n    },\n    {\n      type: 'end', // The cut type (either \"begin\" or \"end\")\n      value: 10000 // The position of the cut relative to the media duration (in milliseconds)\n    }\n  ]\n}\n\n\n\n\n<opl-player\n  ...\n  opl-data=\"data\"\n></opl-player>\n\n\n\n\nopl-full-viewport (optional)\n\n\nIndicates if player must take the full viewport or not (Default to \nfalse\n).\n\n\n<opl-player\n  ...\n  opl-full-viewport=\"false\"\n></opl-player>\n\n\n\n\nopl-time (optional)\n\n\nIndicates if video time / duration must be displayed or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-time=\"true\"\n></opl-player>\n\n\n\n\nopl-fullscreen-icon (optional)\n\n\nIndicates if fullscreen icon must be displayed or not (Default to \ntrue\n).\nNote that even if this option is set to true, this icon can be hidden on devices/browsers without support for Javascript Fullscreen API.\n\n\n<opl-player\n  ...\n  opl-fullscreen-icon=\"true\"\n></opl-player>\n\n\n\n\nopl-volume-icon (optional)\n\n\nIndicates if volume icon must be displayed or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-volume-icon=\"true\"\n></opl-player>\n\n\n\n\nopl-template-icon (optional)\n\n\nIndicates if template selector icon must be displayed or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-template-icon=\"true\"\n></opl-player>\n\n\n\n\nopl-settings-icon (optional)\n\n\nIndicates if settings icon must be displayed or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-settings-icon=\"true\"\n></opl-player>\n\n\n\n\nopl-veo-labs-icon (optional)\n\n\nIndicates if Veo-Labs icon must be displayed or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-veo-labs-icon=\"true\"\n></opl-player>\n\n\n\n\nopl-language (optional)\n\n\nIndicates player language. (Default to \nen\n)\n\n\nSupported values are:\n\n\n\n\nfr\n\n\nen\n\n\n\n\n<opl-player\n  ...\n  opl-language=\"en\"\n></opl-player>\n\n\n\n\nopl-player-type (optional)\n\n\nIndicates player type. (Default to \nhtml\n)\n\n\nSupported values are:\n\n\n\n\nvimeo\n\n\nyoutube\n\n\nhtml\n\n\n\n\n<opl-player\n  ...\n  opl-player-type=\"html\"\n></opl-player>\n\n\n\n\nopl-auto-play (optional)\n\n\nIndicates if player must automatically start when media is ready. (Default to \nfalse\n)\n\n\n<opl-player\n  ...\n  opl-auto-play=\"false\"\n></opl-player>\n\n\n\n\nopl-remember-position (optional)\n\n\nIndicates if player must automatically start at time which video has previously been stopped. (Default to \nfalse\n)\n\n\n<opl-player\n  ...\n  opl-remember-position=\"false\"\n></opl-player>\n\n\n\n\nopl-chapters (optional)\n\n\nIndicates if chapters must be displayed or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-chapters=\"true\"\n></opl-player>\n\n\n\n\nopl-indexes (optional)\n\n\nIndicates if indexes must be displayed or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-indexes=\"true\"\n></opl-player>\n\n\n\n\nopl-tags (optional)\n\n\nIndicates if tags must be displayed or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-tags=\"true\"\n></opl-player>\n\n\n\n\nopl-cuts (optional)\n\n\nIndicates if cuts must be enabled or not (Default to \ntrue\n).\n\n\n<opl-player\n  ...\n  opl-cuts=\"true\"\n></opl-player>\n\n\n\n\nopl-template (optional)\n\n\nIndicates the template to use. Could be either \"split_50_50\", \"split_1\", \"split_2\" or \"split_25_75\" (Default to \nsplit_50_50\n)\n\n\n$scope.template = 'split_50_50';\n\n\n\n\n<opl-player\n  ...\n  opl-template=\"template\"\n></opl-player>",
            "title": "Getting started"
        },
        {
            "location": "/getting-started/#introduction",
            "text": "OpenVeo Player defines an AngularJS directive  opl-player :  <opl-player\n  opl-data=\"data\"\n  opl-fullscreen-icon=\"true\"\n  opl-volume-icon=\"true\"\n  opl-template=\"split_50_50\"\n  opl-template-icon=\"true\"\n  opl-settings-icon=\"true\"\n  opl-veo-labs-icon=\"true\"\n  opl-time=\"true\"\n  opl-full-viewport=\"false\"\n  opl-language=\"en\"\n  opl-player-type=\"html\"\n  opl-auto-play=\"false\"\n  opl-remember-position=\"false\"\n  opl-chapters=\"true\"\n  opl-indexes=\"true\"\n  opl-tags=\"true\"\n  opl-cuts=\"true\"\n></opl-player>  This directive creates a video player with images synchronization and chapters.",
            "title": "Introduction"
        },
        {
            "location": "/getting-started/#include-player-css",
            "text": "<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n<!-- Only for HTML type-->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">",
            "title": "Include player CSS"
        },
        {
            "location": "/getting-started/#include-scripts",
            "text": "<script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n<script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n\n<!-- Only for HTML type -->\n<script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n<script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>  Nb :   Video.js  library must be included before including the OpenVeo Player script.",
            "title": "Include scripts"
        },
        {
            "location": "/getting-started/#attributes",
            "text": "opl-player  directive attributes helps you customize the player.",
            "title": "Attributes"
        },
        {
            "location": "/getting-started/#opl-data",
            "text": "Sets player data, points of interest and cuts.  $scope.data = {\n  mediaId: ['34532ezr54sdf87', 'dzzfeg4547841'], // The list of media ids, one id by source. For the \"html\" player, the first media id corresponds to the first source, the second media id to the second source and so on\n  timecodes: [ // A list of indexes\n    {\n      timecode: 0, // The position of the index relative to the media duration (in milliseconds)\n      image: { // The small and large version of the image representing the index\n        small: 'https://host.local/image1-small.jpeg', // URL of the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80\n        large: 'https://host.local/image1-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged\n      }\n    },\n    {\n      timecode: 1200, // The position of the index relative to the media duration (in milliseconds)\n      image: { // The small and large version of the image representing the index\n        small: {\n          url: 'https://host.local/sprite.jpeg', // URL of the sprite containing the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80\n          x: 142, // x coordinate of the small image inside the sprite image\n          y: 0 // y coordinate of the small image inside the sprite image\n        },\n        large: 'https://host.local/image2-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged\n      }\n    },\n    ...\n  ],\n  sources: [ // The list of sources, one source by media id (only for the \"html\" player)\n    {\n      files: [ // A list of MP4 files (qualities)\n        {\n          width: 640, // The video width in pixels\n          height: 360, // The video height in pixels\n          link: 'https://host.local/pathToSDMP4-34532ezr54sdf87.mp4' // The URL of the MP4 file\n        },\n        {\n          width: 1280, // The video width in pixels\n          height: 720, // The video height in pixels\n          link: 'https://host.local/pathToHDMP4-34532ezr54sdf87.mp4' // The URL of the MP4 file\n        },\n        ...\n      ]\n    },\n    {\n      files: [ // A list of MP4 files (qualities)\n        {\n          width: 640, // The video width in pixels\n          height: 360, // The video height in pixels\n          link: 'https://host.local/pathToSDMP42-dzzfeg4547841.mp4' // The URL of the MP4 file\n        },\n        {\n          width: 1280, // The video width in pixels\n          height: 720, // The video height in pixels\n          link: 'https://host.local/pathToHDMP42-dzzfeg4547841.mp4' // The URL of the MP4 file\n        },\n        ...\n      ]\n    }\n  ],\n  thumbnail: \"https://host.local/thumbnail.jpg\", // The URL of the image to display before the video starts (only for the \"html\" player)\n  chapters: [ // A list of chapters\n    {\n      name: 'Simple chapter', // The chapter name displayed in the list of chapters and when a chapter is enlarged\n      description: 'Chapter 1 description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags\n      value: 1000 // The position of the chapter relative to the media duration (in milliseconds)\n    },\n    {\n      name: 'Chapter with attached file', // // The chapter name displayed in the list of chapters and when a chapter is enlarged\n      description: 'Chapter with attached file description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags\n      value: 2000, // The position of the chapter relative to the media duration (in milliseconds)\n      file: { // A file attached to the chapter\n        url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the chapter\n        originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension)\n      }\n    },\n    ...\n  ],\n  tags : [ // tags\n    {\n      name: 'Simple tag', // The tag name displayed in the list of tags and when a tag is enlarged\n      description: 'Simple tag description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags\n      value: 1000 // The position of the tag relative to the media duration (in milliseconds)\n    },\n    {\n      name: 'Tag with attached file', // The tag name displayed in the list of tags and when a tag is enlarged\n      description: 'Tag with attached file description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags\n      value: 2000, // The position of the tag relative to the media duration (in milliseconds)\n      file: { // A file attached to the tag\n        url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the tag\n        originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension)\n      }\n    },\n    ...\n  ],\n  cut: [ // The list of cuts to apply to the media, for now only start and end cuts are available\n    {\n      type: 'begin', // The cut type (either \"begin\" or \"end\")\n      value: 0 // The position of the cut relative to the media duration (in milliseconds)\n    },\n    {\n      type: 'end', // The cut type (either \"begin\" or \"end\")\n      value: 10000 // The position of the cut relative to the media duration (in milliseconds)\n    }\n  ]\n}  <opl-player\n  ...\n  opl-data=\"data\"\n></opl-player>",
            "title": "opl-data"
        },
        {
            "location": "/getting-started/#opl-full-viewport-optional",
            "text": "Indicates if player must take the full viewport or not (Default to  false ).  <opl-player\n  ...\n  opl-full-viewport=\"false\"\n></opl-player>",
            "title": "opl-full-viewport (optional)"
        },
        {
            "location": "/getting-started/#opl-time-optional",
            "text": "Indicates if video time / duration must be displayed or not (Default to  true ).  <opl-player\n  ...\n  opl-time=\"true\"\n></opl-player>",
            "title": "opl-time (optional)"
        },
        {
            "location": "/getting-started/#opl-fullscreen-icon-optional",
            "text": "Indicates if fullscreen icon must be displayed or not (Default to  true ).\nNote that even if this option is set to true, this icon can be hidden on devices/browsers without support for Javascript Fullscreen API.  <opl-player\n  ...\n  opl-fullscreen-icon=\"true\"\n></opl-player>",
            "title": "opl-fullscreen-icon (optional)"
        },
        {
            "location": "/getting-started/#opl-volume-icon-optional",
            "text": "Indicates if volume icon must be displayed or not (Default to  true ).  <opl-player\n  ...\n  opl-volume-icon=\"true\"\n></opl-player>",
            "title": "opl-volume-icon (optional)"
        },
        {
            "location": "/getting-started/#opl-template-icon-optional",
            "text": "Indicates if template selector icon must be displayed or not (Default to  true ).  <opl-player\n  ...\n  opl-template-icon=\"true\"\n></opl-player>",
            "title": "opl-template-icon (optional)"
        },
        {
            "location": "/getting-started/#opl-settings-icon-optional",
            "text": "Indicates if settings icon must be displayed or not (Default to  true ).  <opl-player\n  ...\n  opl-settings-icon=\"true\"\n></opl-player>",
            "title": "opl-settings-icon (optional)"
        },
        {
            "location": "/getting-started/#opl-veo-labs-icon-optional",
            "text": "Indicates if Veo-Labs icon must be displayed or not (Default to  true ).  <opl-player\n  ...\n  opl-veo-labs-icon=\"true\"\n></opl-player>",
            "title": "opl-veo-labs-icon (optional)"
        },
        {
            "location": "/getting-started/#opl-language-optional",
            "text": "Indicates player language. (Default to  en )  Supported values are:   fr  en   <opl-player\n  ...\n  opl-language=\"en\"\n></opl-player>",
            "title": "opl-language (optional)"
        },
        {
            "location": "/getting-started/#opl-player-type-optional",
            "text": "Indicates player type. (Default to  html )  Supported values are:   vimeo  youtube  html   <opl-player\n  ...\n  opl-player-type=\"html\"\n></opl-player>",
            "title": "opl-player-type (optional)"
        },
        {
            "location": "/getting-started/#opl-auto-play-optional",
            "text": "Indicates if player must automatically start when media is ready. (Default to  false )  <opl-player\n  ...\n  opl-auto-play=\"false\"\n></opl-player>",
            "title": "opl-auto-play (optional)"
        },
        {
            "location": "/getting-started/#opl-remember-position-optional",
            "text": "Indicates if player must automatically start at time which video has previously been stopped. (Default to  false )  <opl-player\n  ...\n  opl-remember-position=\"false\"\n></opl-player>",
            "title": "opl-remember-position (optional)"
        },
        {
            "location": "/getting-started/#opl-chapters-optional",
            "text": "Indicates if chapters must be displayed or not (Default to  true ).  <opl-player\n  ...\n  opl-chapters=\"true\"\n></opl-player>",
            "title": "opl-chapters (optional)"
        },
        {
            "location": "/getting-started/#opl-indexes-optional",
            "text": "Indicates if indexes must be displayed or not (Default to  true ).  <opl-player\n  ...\n  opl-indexes=\"true\"\n></opl-player>",
            "title": "opl-indexes (optional)"
        },
        {
            "location": "/getting-started/#opl-tags-optional",
            "text": "Indicates if tags must be displayed or not (Default to  true ).  <opl-player\n  ...\n  opl-tags=\"true\"\n></opl-player>",
            "title": "opl-tags (optional)"
        },
        {
            "location": "/getting-started/#opl-cuts-optional",
            "text": "Indicates if cuts must be enabled or not (Default to  true ).  <opl-player\n  ...\n  opl-cuts=\"true\"\n></opl-player>",
            "title": "opl-cuts (optional)"
        },
        {
            "location": "/getting-started/#opl-template-optional",
            "text": "Indicates the template to use. Could be either \"split_50_50\", \"split_1\", \"split_2\" or \"split_25_75\" (Default to  split_50_50 )  $scope.template = 'split_50_50';  <opl-player\n  ...\n  opl-template=\"template\"\n></opl-player>",
            "title": "opl-template (optional)"
        },
        {
            "location": "/adaptive-streaming/",
            "text": "Introduction\n\n\nOpenVeo Player support Adaptive Streaming DASH and HLS. It will automaticaly switch between protocols according browser capabilities.\n\n\nPrerequisites\n\n\nOpenVeo Player embeds Video.js to display the HTML player. Video.js natively supports HLS but in order to support DASH, you have to install and import dependencies:\n\n\nInstall Dash.js:\n\n\nnpm install dashjs@{DASH_JS_VERSION}\n\n\n\nInstall videojs-contrib-dash plugin:\n\n\nnpm install videojs-contrib-dash@{CONTRIB_DASH_VERSION}\n\n\n\nAnd import dependencies to use adaptive sources:\n\n\n    <script type=\"text/javascript\" src=\"lib/dashjs/dist/dash.all.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/videojs-contrib-dash/dist/videojs-dash.min.js\"></script>\n\n\n\n\nHow to play adaptive sources\n\n\nYou need to define your adaptive sources by setting their mimetype and their link.\n\n\n$scope.data.sources = [\n  {\n    adaptive: [ // The list of video adaptive sources (only for \"html\" player)\n          { // Dash source\n           height: 720,\n           mimeType: 'application/dash+xml',\n           link: 'https://host.local/openveo/mp4:bunny.mp4/manifest.mpd'\n          },\n          { // HLS Source\n           height: 720,\n           mimeType: 'application/vnd.apple.mpegurl',\n           link: 'https://host.local/openveo/mp4:bunny.mp4/manifest.m3u8'\n          },\n          { // RTMP source\n            mimeType: 'rtmp/mp4',\n            link: 'rtmp://host.local/openveo/&mp4:bunny.mp4'\n          }\n    ],\n    files : [ // The list of different resolutions sources for this video (only for \"html\" player)\n      {\n        width : 640, // Video width for this file\n        height : 360, // Video height for this file\n        link : 'https://host.local/pathToSmallMP4.mp4' // Video url\n      },\n      {\n        width : 1280, // Video width for this file\n        height : 720, // Video height for this file\n        link : 'https://host.local/pathToHDMP4.mp4' // Video url\n      },\n      ...\n    ]\n  }\n]\n\n\n\n\nAnd set you player type to 'html':\n\n\n<opl-player\n  ...\n  opl-data=\"data\"\n  opl-player-type=\"html\"\n></opl-player>\n\n\n\n\nNB\n: \"Adaptive\" sources are always prioritized. \"files\" sources will be ignored if \"adaptive\" property is defined.",
            "title": "Adaptive streaming"
        },
        {
            "location": "/adaptive-streaming/#introduction",
            "text": "OpenVeo Player support Adaptive Streaming DASH and HLS. It will automaticaly switch between protocols according browser capabilities.",
            "title": "Introduction"
        },
        {
            "location": "/adaptive-streaming/#prerequisites",
            "text": "OpenVeo Player embeds Video.js to display the HTML player. Video.js natively supports HLS but in order to support DASH, you have to install and import dependencies:  Install Dash.js:  npm install dashjs@{DASH_JS_VERSION}  Install videojs-contrib-dash plugin:  npm install videojs-contrib-dash@{CONTRIB_DASH_VERSION}  And import dependencies to use adaptive sources:      <script type=\"text/javascript\" src=\"lib/dashjs/dist/dash.all.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/videojs-contrib-dash/dist/videojs-dash.min.js\"></script>",
            "title": "Prerequisites"
        },
        {
            "location": "/adaptive-streaming/#how-to-play-adaptive-sources",
            "text": "You need to define your adaptive sources by setting their mimetype and their link.  $scope.data.sources = [\n  {\n    adaptive: [ // The list of video adaptive sources (only for \"html\" player)\n          { // Dash source\n           height: 720,\n           mimeType: 'application/dash+xml',\n           link: 'https://host.local/openveo/mp4:bunny.mp4/manifest.mpd'\n          },\n          { // HLS Source\n           height: 720,\n           mimeType: 'application/vnd.apple.mpegurl',\n           link: 'https://host.local/openveo/mp4:bunny.mp4/manifest.m3u8'\n          },\n          { // RTMP source\n            mimeType: 'rtmp/mp4',\n            link: 'rtmp://host.local/openveo/&mp4:bunny.mp4'\n          }\n    ],\n    files : [ // The list of different resolutions sources for this video (only for \"html\" player)\n      {\n        width : 640, // Video width for this file\n        height : 360, // Video height for this file\n        link : 'https://host.local/pathToSmallMP4.mp4' // Video url\n      },\n      {\n        width : 1280, // Video width for this file\n        height : 720, // Video height for this file\n        link : 'https://host.local/pathToHDMP4.mp4' // Video url\n      },\n      ...\n    ]\n  }\n]  And set you player type to 'html':  <opl-player\n  ...\n  opl-data=\"data\"\n  opl-player-type=\"html\"\n></opl-player>  NB : \"Adaptive\" sources are always prioritized. \"files\" sources will be ignored if \"adaptive\" property is defined.",
            "title": "How to play adaptive sources"
        },
        {
            "location": "/api/",
            "text": "Introduction\n\n\nPlayer can be controlled by methods and emits catchable events on the player HTML element.\n\n\nMethods\n\n\nselectTemplate(template)\n\n\nSets the display template.\n\n\nUsage:\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.selectTemplate('split_2');\n});\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nString\n\n\nDisplay template (can be either \nsplit_1\n, \nsplit_50_50\n, \nsplit_25_75\n or \nsplit_2\n)\n\n\n\n\n\n\n\n\nplayPause()\n\n\nStarts / Pauses the player.\n\n\nUsage:\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.playPause();\n});\n\n\n\n\nsetVolume(volume)\n\n\nSets the player volume.\n\n\nUsage:\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.setVolume(50);\n});\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nvolume\n\n\nNumber\n\n\nThe volume to set from 0 to 100\n\n\n\n\n\n\n\n\nsetTime(time)\n\n\nSets the player time.\n\n\nUsage:\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.setTime(50000);\n});\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ntime\n\n\nNumber\n\n\nThe time to set (in milliseconds) relative to the cut media\n\n\n\n\n\n\n\n\nsetDefinition(definition)\n\n\nSets actual media definition.\n\n\nUsage:\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.setDefinition({\n    width: 1280,\n    height: 720,\n    link: 'http(s)://host.local/linkToTheHDFile'\n  });\n});\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\ndefinition\n\n\nObject\n\n\nThe definition description object\n\n\n\n\n\n\n\n\nsetSource\n\n\nSets actual media source if multi sources.\n\n\nUsage:\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.setSource(1);\n});\n\n\n\n\nArguments:\n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nNumber\n\n\nThe index of the source to load from the list of sources\n\n\n\n\n\n\n\n\nEvents\n\n\nready\n\n\nThe player is ready to receive actions.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n});\n\n\n\n\nwaiting\n\n\nMedia playback has stopped because the next frame is not available.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('waiting', function(event){\n  console.log('waiting');\n});\n\n\n\n\nplaying\n\n\nMedia playback is ready to start after being paused or delayed due to lack of media data.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('playing', function(event){\n  console.log('playing');\n});\n\n\n\n\ndurationChange\n\n\nThe duration attribute has just been updated.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('durationChange', function(event, duration){\n  console.log('durationChange with new duration = ' + duration + 'ms');\n});\n\n\n\n\nplay\n\n\nMedia is no longer paused.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('play', function(event, duration){\n  console.log('play');\n});\n\n\n\n\npause\n\n\nMedia has been paused.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('pause', function(event, duration){\n  console.log('pause');\n});\n\n\n\n\nloadProgress\n\n\nGot buffering information.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('loadProgress', function(event, percents){\n  console.log('loadProgress');\n  console.log('Buffering start = ' + percents.loadedStart);\n  console.log('Buffering end = ' + percents.loadedPercent);\n});\n\n\n\n\nplayProgress\n\n\nMedia playback position has changed.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('playProgress', function(event, data){\n  console.log('playProgress');\n  console.log('Current time = ' + data.time + 'ms');\n  console.log('Played percent = ' + data.percent);\n});\n\n\n\n\nend\n\n\nMedia playback has reached the end.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('end', function(event, duration){\n  console.log('end');\n});\n\n\n\n\nerror\n\n\nPlayer has encountered an error.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('error', function(event, error){\n  console.log(error.message);\n  console.log(error.code);\n});\n\n\n\n\nneedPoiConversion\n\n\nPlayer has detected the old format of chapters / tags / indexes. Time of chapters / tags and indexes have to be expressed in milliseconds and not in percentage.\n\n\nvar myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('needPoiConversion', function(event, duration){\n  console.log('needPoiConversion');\n  console.log('Video duration = ' + duration + 'ms');\n});",
            "title": "API"
        },
        {
            "location": "/api/#introduction",
            "text": "Player can be controlled by methods and emits catchable events on the player HTML element.",
            "title": "Introduction"
        },
        {
            "location": "/api/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/api/#selecttemplatetemplate",
            "text": "Sets the display template.  Usage:  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.selectTemplate('split_2');\n});  Arguments:     Param  Type  Details      template  String  Display template (can be either  split_1 ,  split_50_50 ,  split_25_75  or  split_2 )",
            "title": "selectTemplate(template)"
        },
        {
            "location": "/api/#playpause",
            "text": "Starts / Pauses the player.  Usage:  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.playPause();\n});",
            "title": "playPause()"
        },
        {
            "location": "/api/#setvolumevolume",
            "text": "Sets the player volume.  Usage:  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.setVolume(50);\n});  Arguments:     Param  Type  Details      volume  Number  The volume to set from 0 to 100",
            "title": "setVolume(volume)"
        },
        {
            "location": "/api/#settimetime",
            "text": "Sets the player time.  Usage:  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.setTime(50000);\n});  Arguments:     Param  Type  Details      time  Number  The time to set (in milliseconds) relative to the cut media",
            "title": "setTime(time)"
        },
        {
            "location": "/api/#setdefinitiondefinition",
            "text": "Sets actual media definition.  Usage:  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.setDefinition({\n    width: 1280,\n    height: 720,\n    link: 'http(s)://host.local/linkToTheHDFile'\n  });\n});  Arguments:     Param  Type  Details      definition  Object  The definition description object",
            "title": "setDefinition(definition)"
        },
        {
            "location": "/api/#setsource",
            "text": "Sets actual media source if multi sources.  Usage:  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n\n  var playerController = angular.element(myPlayer).controller('oplPlayer');\n  playerController.setSource(1);\n});  Arguments:     Param  Type  Details      source  Number  The index of the source to load from the list of sources",
            "title": "setSource"
        },
        {
            "location": "/api/#events",
            "text": "",
            "title": "Events"
        },
        {
            "location": "/api/#ready",
            "text": "The player is ready to receive actions.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('ready', function(event){\n  console.log('ready');\n});",
            "title": "ready"
        },
        {
            "location": "/api/#waiting",
            "text": "Media playback has stopped because the next frame is not available.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('waiting', function(event){\n  console.log('waiting');\n});",
            "title": "waiting"
        },
        {
            "location": "/api/#playing",
            "text": "Media playback is ready to start after being paused or delayed due to lack of media data.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('playing', function(event){\n  console.log('playing');\n});",
            "title": "playing"
        },
        {
            "location": "/api/#durationchange",
            "text": "The duration attribute has just been updated.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('durationChange', function(event, duration){\n  console.log('durationChange with new duration = ' + duration + 'ms');\n});",
            "title": "durationChange"
        },
        {
            "location": "/api/#play",
            "text": "Media is no longer paused.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('play', function(event, duration){\n  console.log('play');\n});",
            "title": "play"
        },
        {
            "location": "/api/#pause",
            "text": "Media has been paused.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('pause', function(event, duration){\n  console.log('pause');\n});",
            "title": "pause"
        },
        {
            "location": "/api/#loadprogress",
            "text": "Got buffering information.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('loadProgress', function(event, percents){\n  console.log('loadProgress');\n  console.log('Buffering start = ' + percents.loadedStart);\n  console.log('Buffering end = ' + percents.loadedPercent);\n});",
            "title": "loadProgress"
        },
        {
            "location": "/api/#playprogress",
            "text": "Media playback position has changed.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('playProgress', function(event, data){\n  console.log('playProgress');\n  console.log('Current time = ' + data.time + 'ms');\n  console.log('Played percent = ' + data.percent);\n});",
            "title": "playProgress"
        },
        {
            "location": "/api/#end",
            "text": "Media playback has reached the end.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('end', function(event, duration){\n  console.log('end');\n});",
            "title": "end"
        },
        {
            "location": "/api/#error",
            "text": "Player has encountered an error.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('error', function(event, error){\n  console.log(error.message);\n  console.log(error.code);\n});",
            "title": "error"
        },
        {
            "location": "/api/#needpoiconversion",
            "text": "Player has detected the old format of chapters / tags / indexes. Time of chapters / tags and indexes have to be expressed in milliseconds and not in percentage.  var myPlayer = document.getElementById('myPlayer');\n\nangular.element(myPlayer).on('needPoiConversion', function(event, duration){\n  console.log('needPoiConversion');\n  console.log('Video duration = ' + duration + 'ms');\n});",
            "title": "needPoiConversion"
        },
        {
            "location": "/examples/",
            "text": "Player HTML example\n\n\nYou can use the HTML player to play a video by its url.\n\n\nThe HTML player expects one media id with one source.\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"html\"\n      opl-data=\"data\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data =\n      {\n        mediaId: ['136081112'], // The list of media ids, one id by source. For the \"html\" player, the first media id corresponds to the first source, the second media id to the second source and so on\n        timecodes: [ // A list of indexes\n          {\n            timecode: 0, // The position of the index relative to the media duration (in milliseconds)\n            image: { // The small and large version of the image representing the index\n              small: 'https://host.local/image1-small.jpeg', // URL of the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80\n              large: 'https://host.local/image1-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged\n            }\n          },\n          {\n            timecode: 1200, // The position of the index relative to the media duration (in milliseconds)\n            image: { // The small and large version of the image representing the index\n              small: {\n                url: 'https://host.local/sprite.jpeg', // URL of the sprite containing the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80\n                x: 142, // x coordinate of the small image inside the sprite image\n                y: 0 // y coordinate of the small image inside the sprite image\n              },\n              large: 'https://host.local/image2-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged\n            }\n          }\n        ],\n        sources: [ // The list of sources, one source by media id (only for the \"html\" player)\n          {\n            files: [ // A list of MP4 files (qualities)\n              {\n                width: 640, // The video width in pixels\n                height: 360, // The video height in pixels\n                link: 'https://host.local/pathToSDMP4.mp4' // The URL of the MP4 file\n              },\n              {\n                width: 1280, // The video width in pixels\n                height: 720, // The video height in pixels\n                link: 'https://host.local/pathToHDMP4.mp4' // The URL of the MP4 file\n              }\n            ]\n          }\n        ],\n        thumbnail: \"https://host.local/thumbnail.jpg\", // The URL of the image to display before the video starts (only for the \"html\" player)\n        chapters: [ // A list of chapters\n          {\n            name: 'Simple chapter', // The chapter name displayed in the list of chapters and when a chapter is enlarged\n            description: 'Chapter 1 description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags\n            value: 1000 // The position of the chapter relative to the media duration (in milliseconds)\n          },\n          {\n            name: 'Chapter with attached file', // // The chapter name displayed in the list of chapters and when a chapter is enlarged\n            description: 'Chapter with attached file description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags\n            value: 2000, // The position of the chapter relative to the media duration (in milliseconds)\n            file: { // A file attached to the chapter\n              url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the chapter\n              originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension)\n            }\n          }\n        ],\n        tags: [ // A list of tags\n          {\n            name: 'Simple tag', // The tag name displayed in the list of tags and when a tag is enlarged\n            description: 'Simple tag description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags\n            value: 1000 // The position of the tag relative to the media duration (in milliseconds)\n          },\n          {\n            name: 'Tag with attached file', // The tag name displayed in the list of tags and when a tag is enlarged\n            description: 'Tag with attached file description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags\n            value: 2000, // The position of the tag relative to the media duration (in milliseconds)\n            file: { // A file attached to the tag\n              url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the tag\n              originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension)\n            }\n          }\n        ],\n        cut: [ // The list of cuts to apply to the media, for now only start and end cuts are available\n          {\n            type: 'begin', // The cut type (either \"begin\" or \"end\")\n            value: 0 // The position of the cut relative to the media duration (in milliseconds)\n          },\n          {\n            type: 'end', // The cut type (either \"begin\" or \"end\")\n            value: 10000 // The position of the cut relative to the media duration (in milliseconds)\n          }\n        ]\n      };\n  }\n\n})(angular);\n\n\n\n\nPlayer HTML Multi-sources example\n\n\nYou can also use the HTML player to play several sources (different viewpoint for example).\n\n\nThe HTML player expects one or several media ids with one or several sources. The first media id corresponds to the first source, the second media id corresponds to the second source and so on.\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"html\"\n      opl-data=\"data\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data =\n      {\n        mediaId: ['136081112', '136081113'], // The list of media ids, one id by source. For the \"html\" player, the first media id corresponds to the first source, the second media id to the second source and so on\n        sources: [ // The list of sources, one source by media id (only for the \"html\" player)\n          {\n            files: [ // A list of MP4 files (qualities)\n              {\n                width: 640, // The video width in pixels\n                height: 360, // The video height in pixels\n                link: 'https://host.local/pathToSDMP4-136081112.mp4' // The URL of the MP4 file\n              },\n              {\n                width: 1280, // The video width in pixels\n                height: 720, // The video height in pixels\n                link: 'https://host.local/pathToHDMP4-136081113.mp4' // The URL of the MP4 file\n              },\n              ...\n            ]\n          },\n          {\n            files: [ // A list of MP4 files (qualities)\n              {\n                width: 640, // The video width in pixels\n                height: 360, // The video height in pixels\n                link: 'https://host.local/pathToSDMP4-136081113.mp4' // The URL of the MP4 file\n              },\n              {\n                width: 1280, // The video width in pixels\n                height: 720, // The video height in pixels\n                link: 'https://host.local/pathToHDMP4-136081113.mp4' // The URL of the MP4 file\n              },\n              ...\n            ]\n          }\n        ],\n        [...]\n      };\n  }\n\n})(angular);\n\n\n\n\nPlayer Vimeo example\n\n\nYou can use Vimeo player to play a video hosted on Vimeo platform using Vimeo player.\n\n\nThe Vimeo player expects the id of the media hosted on Vimeo. You can specify several media ids for multi sources (multi viewpoint).\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"vimeo\"\n      opl-data=\"data\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data =\n      {\n        mediaId: ['136081112'], // The id(s) of the source(s) on Vimeo platform\n        [...]\n     };\n  }\n\n})(angular);\n\n\n\n\nPlayer Youtube example\n\n\nYou can use Youtube player to play a video hosted on Youtube platform using Youtube player.\n\n\nThe Youtube player expects the id of the media hosted on Youtube. You can specify several media ids for multi sources (multi viewpoint).\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"youtube\"\n      opl-data=\"data\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data =\n      {\n        mediaId : ['136081112'], // The id(s) of the source(s) on Youtube platform\n        [...]\n     };\n  }\n\n})(angular);\n\n\n\n\nPlayer API\n example\n\n\nYou can interact with the player using the API.\n\n\nindex.html\n\n\n<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"html\"\n      opl-data=\"data\"\n      ng-show=\"ready\"\n      id=\"myPlayer\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>\n\n\n\n\napp.js\n\n\n(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data = {\n      mediaId: ['136081112'], // The list of media ids, one id by source. For the \"html\" player, the first media id corresponds to the first source, the second media id to the second source and so on\n      sources: [ // The list of sources, one source by media id (only for the \"html\" player)\n        {\n          files: [ // A list of MP4 files (qualities)\n            {\n              width: 640, // The video width in pixels\n              height: 360, // The video height in pixels\n              link: 'https://host.local/pathToSDMP4-136081112.mp4' // The URL of the MP4 file\n            },\n            {\n              width: 1280, // The video width in pixels\n              height: 720, // The video height in pixels\n              link: 'https://host.local/pathToHDMP4-136081112.mp4' // The URL of the MP4 file\n            }\n          ]\n        }\n      ]\n    };\n\n    var myPlayer = document.getElementById('myPlayer');\n\n    // Listen to ready event\n    angular.element(myPlayer).on('ready', function(event) {\n      console.log('ready');\n      $scope.ready = true;\n\n      var playerController = angular.element(myPlayer).controller('oplPlayer');\n\n      // Selects a new display template ('split_2')\n      playerController.selectTemplate('split_2');\n\n      // Starts / Pauses the player\n      playerController.playPause();\n\n      // Sets volume to 10%\n      playerController.setVolume(10);\n\n      // Seeks media to time 20s\n      playerController.setTime(20000);\n\n      // Changes media source\n      playerController.setSource(1);\n\n    });\n\n    angular.element(myPlayer).on('waiting', function(event) {\n      console.log('waiting');\n    });\n\n    angular.element(myPlayer).on('playing', function(event) {\n      console.log('playing');\n    });\n\n    angular.element(myPlayer).on('durationChange', function(event, duration) {\n      console.log('durationChange with new duration = ' + duration + 'ms');\n    });\n\n    angular.element(myPlayer).on('play', function(event) {\n      console.log('play');\n    });\n\n    angular.element(myPlayer).on('pause', function(event) {\n      console.log('pause');\n    });\n\n    angular.element(myPlayer).on('loadProgress', function(event, percents) {\n      console.log('loadProgress');\n      console.log('Buffering start = ' + percents.loadedStart);\n      console.log('Buffering end = ' + percents.loadedPercent);\n    });\n\n    angular.element(myPlayer).on('playProgress', function(event, data) {\n      console.log('playProgress');\n      console.log('Current time = ' + data.time + 'ms');\n      console.log('Played percent = ' + data.percent);\n    });\n\n    angular.element(myPlayer).on('end', function(event) {\n      console.log('end');\n    });\n\n    angular.element(myPlayer).on('error', function(event, error) {\n      console.log(error.message);\n      console.log(error.code);\n    });\n\n  }\n\n})(angular);",
            "title": "Examples"
        },
        {
            "location": "/examples/#player-html-example",
            "text": "You can use the HTML player to play a video by its url.  The HTML player expects one media id with one source.",
            "title": "Player HTML example"
        },
        {
            "location": "/examples/#indexhtml",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"html\"\n      opl-data=\"data\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs",
            "text": "(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data =\n      {\n        mediaId: ['136081112'], // The list of media ids, one id by source. For the \"html\" player, the first media id corresponds to the first source, the second media id to the second source and so on\n        timecodes: [ // A list of indexes\n          {\n            timecode: 0, // The position of the index relative to the media duration (in milliseconds)\n            image: { // The small and large version of the image representing the index\n              small: 'https://host.local/image1-small.jpeg', // URL of the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80\n              large: 'https://host.local/image1-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged\n            }\n          },\n          {\n            timecode: 1200, // The position of the index relative to the media duration (in milliseconds)\n            image: { // The small and large version of the image representing the index\n              small: {\n                url: 'https://host.local/sprite.jpeg', // URL of the sprite containing the small image representing the index. Displayed in the list of indexes and when pointer is over the timebar. Expected small image size is 142x80\n                x: 142, // x coordinate of the small image inside the sprite image\n                y: 0 // y coordinate of the small image inside the sprite image\n              },\n              large: 'https://host.local/image2-large.jpeg' // URL of the large image representing the index. Displayed in the area 2 when playing time corresponds to the index time, and when an index of the list of indexes is enlarged\n            }\n          }\n        ],\n        sources: [ // The list of sources, one source by media id (only for the \"html\" player)\n          {\n            files: [ // A list of MP4 files (qualities)\n              {\n                width: 640, // The video width in pixels\n                height: 360, // The video height in pixels\n                link: 'https://host.local/pathToSDMP4.mp4' // The URL of the MP4 file\n              },\n              {\n                width: 1280, // The video width in pixels\n                height: 720, // The video height in pixels\n                link: 'https://host.local/pathToHDMP4.mp4' // The URL of the MP4 file\n              }\n            ]\n          }\n        ],\n        thumbnail: \"https://host.local/thumbnail.jpg\", // The URL of the image to display before the video starts (only for the \"html\" player)\n        chapters: [ // A list of chapters\n          {\n            name: 'Simple chapter', // The chapter name displayed in the list of chapters and when a chapter is enlarged\n            description: 'Chapter 1 description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags\n            value: 1000 // The position of the chapter relative to the media duration (in milliseconds)\n          },\n          {\n            name: 'Chapter with attached file', // // The chapter name displayed in the list of chapters and when a chapter is enlarged\n            description: 'Chapter with attached file description', // The chapter description. The description is displayed when chapter is enlarged. Description may contain HTML tags\n            value: 2000, // The position of the chapter relative to the media duration (in milliseconds)\n            file: { // A file attached to the chapter\n              url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the chapter\n              originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension)\n            }\n          }\n        ],\n        tags: [ // A list of tags\n          {\n            name: 'Simple tag', // The tag name displayed in the list of tags and when a tag is enlarged\n            description: 'Simple tag description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags\n            value: 1000 // The position of the tag relative to the media duration (in milliseconds)\n          },\n          {\n            name: 'Tag with attached file', // The tag name displayed in the list of tags and when a tag is enlarged\n            description: 'Tag with attached file description', // The tag description. The description is displayed when tag is enlarged. Description may contain HTML tags\n            value: 2000, // The position of the tag relative to the media duration (in milliseconds)\n            file: { // A file attached to the tag\n              url: 'https://host.local/video.mp4', // File URL. The displayed file name is retrieved for the URL when enlarging the tag\n              originalName: 'download-file-name' // The name presented to the user when downloading the file (should not contain the extension)\n            }\n          }\n        ],\n        cut: [ // The list of cuts to apply to the media, for now only start and end cuts are available\n          {\n            type: 'begin', // The cut type (either \"begin\" or \"end\")\n            value: 0 // The position of the cut relative to the media duration (in milliseconds)\n          },\n          {\n            type: 'end', // The cut type (either \"begin\" or \"end\")\n            value: 10000 // The position of the cut relative to the media duration (in milliseconds)\n          }\n        ]\n      };\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/examples/#player-html-multi-sources-example",
            "text": "You can also use the HTML player to play several sources (different viewpoint for example).  The HTML player expects one or several media ids with one or several sources. The first media id corresponds to the first source, the second media id corresponds to the second source and so on.",
            "title": "Player HTML Multi-sources example"
        },
        {
            "location": "/examples/#indexhtml_1",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"html\"\n      opl-data=\"data\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs_1",
            "text": "(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data =\n      {\n        mediaId: ['136081112', '136081113'], // The list of media ids, one id by source. For the \"html\" player, the first media id corresponds to the first source, the second media id to the second source and so on\n        sources: [ // The list of sources, one source by media id (only for the \"html\" player)\n          {\n            files: [ // A list of MP4 files (qualities)\n              {\n                width: 640, // The video width in pixels\n                height: 360, // The video height in pixels\n                link: 'https://host.local/pathToSDMP4-136081112.mp4' // The URL of the MP4 file\n              },\n              {\n                width: 1280, // The video width in pixels\n                height: 720, // The video height in pixels\n                link: 'https://host.local/pathToHDMP4-136081113.mp4' // The URL of the MP4 file\n              },\n              ...\n            ]\n          },\n          {\n            files: [ // A list of MP4 files (qualities)\n              {\n                width: 640, // The video width in pixels\n                height: 360, // The video height in pixels\n                link: 'https://host.local/pathToSDMP4-136081113.mp4' // The URL of the MP4 file\n              },\n              {\n                width: 1280, // The video width in pixels\n                height: 720, // The video height in pixels\n                link: 'https://host.local/pathToHDMP4-136081113.mp4' // The URL of the MP4 file\n              },\n              ...\n            ]\n          }\n        ],\n        [...]\n      };\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/examples/#player-vimeo-example",
            "text": "You can use Vimeo player to play a video hosted on Vimeo platform using Vimeo player.  The Vimeo player expects the id of the media hosted on Vimeo. You can specify several media ids for multi sources (multi viewpoint).",
            "title": "Player Vimeo example"
        },
        {
            "location": "/examples/#indexhtml_2",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"vimeo\"\n      opl-data=\"data\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs_2",
            "text": "(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data =\n      {\n        mediaId: ['136081112'], // The id(s) of the source(s) on Vimeo platform\n        [...]\n     };\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/examples/#player-youtube-example",
            "text": "You can use Youtube player to play a video hosted on Youtube platform using Youtube player.  The Youtube player expects the id of the media hosted on Youtube. You can specify several media ids for multi sources (multi viewpoint).",
            "title": "Player Youtube example"
        },
        {
            "location": "/examples/#indexhtml_3",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"youtube\"\n      opl-data=\"data\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs_3",
            "text": "(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data =\n      {\n        mediaId : ['136081112'], // The id(s) of the source(s) on Youtube platform\n        [...]\n     };\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/examples/#player-api-example",
            "text": "You can interact with the player using the API.",
            "title": "Player API example"
        },
        {
            "location": "/examples/#indexhtml_4",
            "text": "<!DOCTYPE html>\n<html ng-app=\"test.player\" ng-controller=\"TestController\" ng-strict-di>\n  <head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/openveo-player/dist/openveo-player.css\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"lib/video.js/dist/video-js.min.css\">\n\n    <!--[if lt IE 9]>\n      <script src=\"lib/html5shiv.min.js\"></script>\n    <![endif]-->\n\n  </head>\n\n  <body>\n\n    <opl-player\n      opl-player-type=\"html\"\n      opl-data=\"data\"\n      ng-show=\"ready\"\n      id=\"myPlayer\"\n    ></opl-player>\n\n    <script type=\"text/javascript\" src=\"lib/angular/angular.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/angular-cookies/angular-cookies.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/video.js/dist/video.min.js\"></script>\n    <script type=\"text/javascript\" src=\"lib/openveo-player/dist/openveo-player.min.js\"></script>\n    <script type=\"text/javascript\" src=\"app.js\"></script>\n  </body>\n\n</html>",
            "title": "index.html"
        },
        {
            "location": "/examples/#appjs_4",
            "text": "(function(angular) {\n\n  'use strict';\n\n  var app = angular.module('test.player', ['ov.player']);\n\n  app.controller('TestController', TestController);\n  TestController.$inject = ['$scope'];\n\n  /**\n   * Defines the test controller.\n   */\n  function TestController($scope) {\n    $scope.data = {\n      mediaId: ['136081112'], // The list of media ids, one id by source. For the \"html\" player, the first media id corresponds to the first source, the second media id to the second source and so on\n      sources: [ // The list of sources, one source by media id (only for the \"html\" player)\n        {\n          files: [ // A list of MP4 files (qualities)\n            {\n              width: 640, // The video width in pixels\n              height: 360, // The video height in pixels\n              link: 'https://host.local/pathToSDMP4-136081112.mp4' // The URL of the MP4 file\n            },\n            {\n              width: 1280, // The video width in pixels\n              height: 720, // The video height in pixels\n              link: 'https://host.local/pathToHDMP4-136081112.mp4' // The URL of the MP4 file\n            }\n          ]\n        }\n      ]\n    };\n\n    var myPlayer = document.getElementById('myPlayer');\n\n    // Listen to ready event\n    angular.element(myPlayer).on('ready', function(event) {\n      console.log('ready');\n      $scope.ready = true;\n\n      var playerController = angular.element(myPlayer).controller('oplPlayer');\n\n      // Selects a new display template ('split_2')\n      playerController.selectTemplate('split_2');\n\n      // Starts / Pauses the player\n      playerController.playPause();\n\n      // Sets volume to 10%\n      playerController.setVolume(10);\n\n      // Seeks media to time 20s\n      playerController.setTime(20000);\n\n      // Changes media source\n      playerController.setSource(1);\n\n    });\n\n    angular.element(myPlayer).on('waiting', function(event) {\n      console.log('waiting');\n    });\n\n    angular.element(myPlayer).on('playing', function(event) {\n      console.log('playing');\n    });\n\n    angular.element(myPlayer).on('durationChange', function(event, duration) {\n      console.log('durationChange with new duration = ' + duration + 'ms');\n    });\n\n    angular.element(myPlayer).on('play', function(event) {\n      console.log('play');\n    });\n\n    angular.element(myPlayer).on('pause', function(event) {\n      console.log('pause');\n    });\n\n    angular.element(myPlayer).on('loadProgress', function(event, percents) {\n      console.log('loadProgress');\n      console.log('Buffering start = ' + percents.loadedStart);\n      console.log('Buffering end = ' + percents.loadedPercent);\n    });\n\n    angular.element(myPlayer).on('playProgress', function(event, data) {\n      console.log('playProgress');\n      console.log('Current time = ' + data.time + 'ms');\n      console.log('Played percent = ' + data.percent);\n    });\n\n    angular.element(myPlayer).on('end', function(event) {\n      console.log('end');\n    });\n\n    angular.element(myPlayer).on('error', function(event, error) {\n      console.log(error.message);\n      console.log(error.code);\n    });\n\n  }\n\n})(angular);",
            "title": "app.js"
        },
        {
            "location": "/developers/basics/",
            "text": "Components\n\n\nOpenVeo Player defines an opl-player component with several sub components:\n\n\n\n\nopl-preview\n Used to display the index preview when cursor is over the timebar\n\n\nopl-slider\n Used to display the timebar\n\n\nopl-volume\n Used to display the volume controller (makes use of the opl-slider)\n\n\nopl-toggle-icon-button\n Used for all toggle buttons\n\n\nopl-template-selector\n Used to select a display template\n\n\nopl-settings\n Used to set current quality and source\n\n\nopl-tabs\n and \nopl-view\n Used to display points of interest as tabs\n\n\nopl-tiles\n and \nopl-tile\n Used to display the list of tags, the list of chapters and the list of indexes\n\n\n\n\nPlayers\n\n\nEach player (HTML, Youtube, Vimeo) as its own implementation and associated template.",
            "title": "The basics"
        },
        {
            "location": "/developers/basics/#components",
            "text": "OpenVeo Player defines an opl-player component with several sub components:   opl-preview  Used to display the index preview when cursor is over the timebar  opl-slider  Used to display the timebar  opl-volume  Used to display the volume controller (makes use of the opl-slider)  opl-toggle-icon-button  Used for all toggle buttons  opl-template-selector  Used to select a display template  opl-settings  Used to set current quality and source  opl-tabs  and  opl-view  Used to display points of interest as tabs  opl-tiles  and  opl-tile  Used to display the list of tags, the list of chapters and the list of indexes",
            "title": "Components"
        },
        {
            "location": "/developers/basics/#players",
            "text": "Each player (HTML, Youtube, Vimeo) as its own implementation and associated template.",
            "title": "Players"
        },
        {
            "location": "/developers/prerequisites/",
            "text": "OpenVeo Player requires additional elements for development:\n\n\n\n\nGit\n - openveo-player is versioned with git\n\n\nRuby\n / \nSass\n / \nCompass\n - CSS is written using SASS / Compass\n\n\nKarma\n - Unit tested are performed using karma\n\n\nGrunt\n - Grunt is used to launch unit tests and compile sources",
            "title": "Prerequisites"
        },
        {
            "location": "/developers/installation/",
            "text": "Clone project from git\n\n\ngit clone git@github.com:veo-labs/openveo-player.git\n\n\n\nInstall project's dependencies\n\n\ncd openveo-player\nnpm install",
            "title": "Installation"
        },
        {
            "location": "/developers/installation/#clone-project-from-git",
            "text": "git clone git@github.com:veo-labs/openveo-player.git",
            "title": "Clone project from git"
        },
        {
            "location": "/developers/installation/#install-projects-dependencies",
            "text": "cd openveo-player\nnpm install",
            "title": "Install project's dependencies"
        },
        {
            "location": "/developers/compilation/",
            "text": "Introduction\n\n\nOpenVeo player is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.\n\n\nCompiling the OpenVeo Player\n\n\nYou can compile the OpenVeo Player with source maps using the following command:\n\n\ngrunt dist\n\n\n\nYou can add the \n--production\n option to compile without source maps (for production):\n\n\ngrunt dist --production",
            "title": "CSS / SASS / JS compilation"
        },
        {
            "location": "/developers/compilation/#introduction",
            "text": "OpenVeo player is written using AngularJS and SASS / Compass. SASS files need to be compiled to generate the CSS and JavaScript files can be minified and aggregated for better performance.",
            "title": "Introduction"
        },
        {
            "location": "/developers/compilation/#compiling-the-openveo-player",
            "text": "You can compile the OpenVeo Player with source maps using the following command:  grunt dist  You can add the  --production  option to compile without source maps (for production):  grunt dist --production",
            "title": "Compiling the OpenVeo Player"
        },
        {
            "location": "/developers/i18n/",
            "text": "OpenVeo Player translations are defined in ov.player module constant \noplI18nTranslations\n.",
            "title": "I18N and I10N"
        },
        {
            "location": "/developers/coding-standards/",
            "text": "OpenVeo Player uses Node.js coding standards. \nESLint\n is used to validate coding rules. You can launch a code verification using the following command:\n\n\ngrunt eslint",
            "title": "Coding standards"
        },
        {
            "location": "/developers/unit-tests/",
            "text": "Unit tests are performed using \nKarma\n. You can launch unit tests with the following command:\n\n\ngrunt test",
            "title": "Unit tests"
        }
    ]
}